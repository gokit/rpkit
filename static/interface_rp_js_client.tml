// All code below are auto-generated and should not be edited by hand.
// See https://github.com/gokit/rpkit for more info.
{{ $Itr := .Itr}} {{$Pkg := .Pkg}} {{$ServiceName := .ServiceName}}

// const URL = require("url-parse");
// const httpStatus = require("statuses");
// const request = require("request");
const buffer = require("safe-buffer");
const lodash = require("lodash");
const axios = require("axios");

// BaseServiceName defines the base name of service root.
export const BaseServiceName = {{quote .ServiceName}};

// MethodServiceName defines the complete name of this giving API service.
export const MethodServiceName = "{{.ServiceName}}/{{.Itr.Object.Name.Name}}";

// ServiceCodePath defines the path to this generated package which contains the implemented service methods.
export const ServiceCodePath = "{{.TargetPackage}}";

// ServiceCodePathName defines the name giving to
// this package.
export const ServiceCodePathName = "{{.ImplPackageName}}";

// error type strings
export const URLError = "url_error";
export const ActionError = "action_error";
export const ActionPanicError = "action_panic_error";
export const MethodTypeError = "method_type_error";
export const AcceptTypeUnknownError = "accept_type_unknown_error";
export const RequestDecodingError = "request_decoding_error";
export const ResponseEncodingError = "response_encoding_error";

// JSONErrorResponse defines a structure to contain error message data
// delivered by the server.
export function JSONErrorResponse(type, code, err, message, meta) {
    return {
        Type: type,
        Code: code,
        Err: err,
        Message: message,
        Meta: meta,
    }
}

// JSONEncoding defines a JSON encoding implementation
// meant to work with the Request from NewRequest and
// response from using https://github.com/axios/axios
// as transport.
export const JSONEncoding = Object.freeze({
    Decode: function(req, res, body) {
        return new Promise(function EncodePromise(resolve, reject) {
            if (res.headers["Content-Type"].indexOf("application/json") === -1) {
                reject(new Error("request content type must be application/json"));
                return;
            }

            if (body instanceof buffer.Buffer) {
                try {
                    const content = JSON.parse(body.toString("utf8"));
                    resolve(content);
                } catch (e) {
                    reject(e);
                }
                return;
            }

            if (typeof body === "string") {
                try {
                    const content = JSON.parse(body);
                    resolve(content);
                } catch (e) {
                    reject(e);
                }
                return;
            };

            if (typeof body === "object") {
                resolve(body);
                return;
            }

            reject({
                Error: new Error("unknown content body received"),
                Body: body,
            });
        });
    },
    Encode: function(req, model) {
        return new Promise(function EncodePromise(resolve, reject) {
            req.setHeader("Content-Type", "application/json");
            req.setHeader("Accept", "application/json");

            try {
                const encoded = JSON.stringify(model);
                req.write(encoded);
            } catch (e) {
                reject(e);
                return;
            }

            resolve(req);
        });
    },
});

// HTTPTransport implements a custom http transport for handling
// request processing and response returning. This allows user
// to plug a custom http request transport handling layer
// as desired. An HTTPTransport must always return
// a promise. The http transport uses https://github.com/axios/axios
// underneath.
export const HTTPTransport = Object.freeze({
    Do: function(req, timeout) {
        return new Promise(function RequestPromise(resolve, reject) {
            axios.request({
				method: "POST",
				timeout: timeout,
                data: req.body.join(""),
				url: joinURL(req.base, req.url),
                headers: lodash.merge(req.headers, {"X-Requested-With-Lib": "axios (https://github.com/axios/axios)"}),
            }).catch((e) =>{
                if(e.response && e.response.data){
                    const msg = getJSONError(e.response.data);
                    msg.axiosError = e;
                    reject(msg);
                    return;
                }

                reject(e);
            }).then((res) => {
                if (requestFacedInternalIssues(res)) {
                    reject(getJSONError(res.data))
                    return;
                };

                if (requestFailed(res)) {
                    reject(getJSONError(res.data))
                    return;
                };

                if (requestRedirected(res)) {
                    reject(getJSONError(res.data))
                    return;
                };

                resolve(Object.freeze({
                    res: res,
                    body: res.data,
                }));
            });
        });
    },
});

// NewRequest returns a object containing basic data related
// to a outgoing request with associated headers to be sent along.
// It is to be used by http transport for fullfilling a request.
export function NewRequest(base, url, headers) {
    const reqObj = {
        base: base,
        url: url,
        headers: headers ? headers : {},
        body: null,
        setHeader: (key, value) => {
            reqObj.headers[key] = value;
        },
        write: (data) => {
            if (reqObj.body) {
                reqObj.push(data);
                return;
            }

            reqObj.body = [];
            reqObj.body.push(data);
        },
    };

    return reqObj;
};

// joinURL joins provided string paths into a whole,
// ensuring to add the necessary slash in between parts.
function joinURL(base, to) {
    if (base.endsWith("/")) {
        return `${base}${to}`;
    }

    return `${base}/${to}`;
};

// prefixSlash prefixes a forward slash to end of provided
// string.
function prefixSlash(c) {
    if (c.endsWith("/")) {
        return c;
    }
    return `${c};`;
};

function requestRedirected(res) {
    if (res.status >= 300 && res.status <= 308) {
        return true;
    }
    return false;
};

function requestFailed(res) {
    if (res.status >= 400 && res.status < 500) {
        return true;
    };
    return false;
};

function requestFacedInternalIssues(res) {
    if (res.status >= 500 && res.status < 600) {
        return true;
    };
    return false;
};

function requestSucceeded(res) {
    if (res.status >= 200 && res.status <= 299) {
        return true;
    };
    return false;
};

function getJSONError(body) {
    if (typeof body === "object") {
        return body;
    }

    let res = null;
    if (body instanceof buffer.Buffer) {
        try {
            const data = body.toString("utf8");
            res = JSON.parse(data);
        } catch (e) {
            return e;
        }
        return res;
    }

    try {
        res = JSON.parse(body);
    } catch (e) {
        return e;
    }

    return res;
};
{{range $_, $method := .NoArgAndReturns}}
// /////////////////////////////////////////////////////////////////
// RP: No Arguments and No Return Methods
// Method: {{$method.Name}}
// Source: {{$Itr.Path}}
// Handler: {{$Itr.Package}}.{{$Itr.Object.Name.Name}}.{{$method.Name}}
// /////////////////////////////////////////////////////////////////

// {{$method.Name}}ServiceRoute defines the route for the {{$method.Name}} method.
export const {{$method.Name}}ServiceRoute = "{{$ServiceName}}.{{$Itr.Object.Name.Name}}/{{$method.Name}}";

// {{$method.Name}}ServiceRoutePath defines the full method path for the {{$method.Name}} method.
export const {{$method.Name}}ServiceRoutePath = "/rpkit/{{$ServiceName}}.{{$Itr.Object.Name.Name}}/{{$method.Name}}";

// {{$method.Name}}ContractSource contains the source version of expected method contract.
export const {{$method.Name}}ContractSource = `type {{$method.Name}}MethodContract interface {
	{{$method.Name}}({{$method.ArgumentList true}}) {{ if $method.HasReturns }}{{if equal $method.TotalReturns 1}} {{$method.ReturnList true}} {{else}} ({{$method.ReturnList true}}) {{end}} {{end}}
}
`;

// {{$method.Name}}Client returns a RPC method to be called to handle requests
// for the {{$method.Name}} method of {{quote $Itr.Path}}.
export function {{$method.Name}}Client(options) {
    if (options.BeforeRequest && typeof options.BeforeRequest !== "function") {
        throw new Error("options.BeforeRequest must be a function");
    }

    if (options.Headers && typeof options.Headers !== "object") {
        throw new Error("options.Headers must be a object map");
    }

    // encoders must be functions that returns promises from their Encode methods.
    if (options.Encoder && typeof options.Encoder.Encode !== "function") {
        throw new Error("Encoder must provide Encoder method");
    }

    // decoders must be functions that returns promises from their Encode methods.
    if (options.Decoder && typeof options.Decoder.Decode !== "function") {
        throw new Error("Decoder must provide Decode method");
    }

    // Transport must be function that returns promises from their calls.
    if (options.Transport && typeof options.Transport.Do !== "function") {
        throw new Error("Transport must provide Do method");
    }

    if (!options.ServiceAddr) {
        throw new Error("options must provide a ServiceAddr pointing to service http server");
    }

    if (!options.Headers) options.Headers = {};
    if (!options.Encoder) options.Encoder = JSONEncoding;
    if (!options.Decoder) options.Decoder = JSONEncoding;
    if (!options.Transport) options.Transport = HTTPTransport;

    return function {{$method.Name}}RPC() {
        return new Promise(function GetUserPromise(resolve, reject) {
            const req = newRequest(options.ServiceAddr, {{$method.Name}}ServiceRoutePath, options.Headers);
            req.setHeader("X-Client", "JS-RPKIT")
            req.setHeader("X-Service", BaseServiceName)
            req.setHeader("X-Package", {{quote $Itr.Path}})
            req.setHeader("X-Method-Client", {{quote $method.Name}})
            req.setHeader("X-Method-ClientService", MethodServiceName)
            req.setHeader("X-API-Client-Route", {{$method.Name}}ServiceRoute)
            req.setHeader("X-API-Client-Route-Path", {{$method.Name}}ServiceRoutePath)
            req.setHeader("X-Client-Package-Interface", "{{$Itr.Package}}.{{$Itr.Object.Name.Name}}")

            if (options.BeforeRequest) options.BeforeRequest(req);

            Promise.resolve(true).then(() => {
                return options.Transport.Do(req);
            }).then((resObj) => {
                resolve(true);
            }).catch((err) => {
                reject(err);
            });
        });
    };
};

{{end}}
{{range $_, $method := .OnlyErrorMethods}}
// /////////////////////////////////////////////////////////////////
// RP: Error Returning methods
// Method: {{$method.Name}}
// Source: {{$Itr.Path}}
// Handler: {{$Itr.Package}}.{{$Itr.Object.Name.Name}}.{{$method.Name}}
// /////////////////////////////////////////////////////////////////

// {{$method.Name}}ServiceRoute defines the route for the {{$method.Name}} method.
export const {{$method.Name}}ServiceRoute = "{{$ServiceName}}.{{$Itr.Object.Name.Name}}/{{$method.Name}}";

// {{$method.Name}}ServiceRoutePath defines the full method path for the {{$method.Name}} method.
export const {{$method.Name}}ServiceRoutePath = "/rpkit/{{$ServiceName}}.{{$Itr.Object.Name.Name}}/{{$method.Name}}";

// {{$method.Name}}ContractSource contains the source version of expected method contract.
export const {{$method.Name}}ContractSource = `type {{$method.Name}}MethodContract interface {
	{{$method.Name}}({{$method.ArgumentList true}}) {{ if $method.HasReturns }}{{if equal $method.TotalReturns 1}} {{$method.ReturnList true}} {{else}} ({{$method.ReturnList true}}) {{end}} {{end}}
}
`;

// {{$method.Name}}Client returns a RPC method to be called to handle requests
// for the {{$method.Name}} method of {{quote $Itr.Path}}.
export function {{$method.Name}}Client(options) {
    if (options.BeforeRequest && typeof options.BeforeRequest !== "function") {
        throw new Error("options.BeforeRequest must be a function");
    }

    if (options.Headers && typeof options.Headers !== "object") {
        throw new Error("options.Headers must be a object map");
    }

    // encoders must be functions that returns promises from their Encode methods.
    if (options.Encoder && typeof options.Encoder.Encode !== "function") {
        throw new Error("Encoder must provide Encoder method");
    }

    // decoders must be functions that returns promises from their Encode methods.
    if (options.Decoder && typeof options.Decoder.Decode !== "function") {
        throw new Error("Decoder must provide Decode method");
    }

    // Transport must be function that returns promises from their calls.
    if (options.Transport && typeof options.Transport.Do !== "function") {
        throw new Error("Transport must provide Do method");
    }

    if (!options.ServiceAddr) {
        throw new Error("options must provide a ServiceAddr pointing to service http server");
    }

    if (!options.Headers) options.Headers = {};
    if (!options.Encoder) options.Encoder = JSONEncoding;
    if (!options.Decoder) options.Decoder = JSONEncoding;
    if (!options.Transport) options.Transport = HTTPTransport;

    return function {{$method.Name}}RPC() {
        return new Promise(function GetUserPromise(resolve, reject) {
            const req = newRequest(options.ServiceAddr, {{$method.Name}}ServiceRoutePath, options.Headers);
            req.setHeader("X-Client", "JS-RPKIT")
            req.setHeader("X-Service", BaseServiceName)
            req.setHeader("X-Package", {{quote $Itr.Path}})
            req.setHeader("X-Method-Client", {{quote $method.Name}})
            req.setHeader("X-Method-ClientService", MethodServiceName)
            req.setHeader("X-API-Client-Route", {{$method.Name}}ServiceRoute)
            req.setHeader("X-API-Client-Route-Path", {{$method.Name}}ServiceRoutePath)
            req.setHeader("X-Client-Package-Interface", "{{$Itr.Package}}.{{$Itr.Object.Name.Name}}")

            if (options.BeforeRequest) options.BeforeRequest(req);

            Promise.resolve(true).then(() => {
                return options.Transport.Do(req);
            }).then((resObj) => {
                resolve(true);
            }).catch((err) => {
                reject(err);
            });
        });
    };
};

{{end}}
{{range $_, $method := .OutputWithErrorMethods}}
// /////////////////////////////////////////////////////////////////
// RP: Output with Returning Error methods
// Method: {{$method.Name}}
// Source: {{$Itr.Path}}
// Handler: {{$Itr.Package}}.{{$Itr.Object.Name.Name}}.{{$method.Name}}
// /////////////////////////////////////////////////////////////////

// {{$method.Name}}ServiceRoute defines the route for the {{$method.Name}} method.
export const {{$method.Name}}ServiceRoute = "{{$ServiceName}}.{{$Itr.Object.Name.Name}}/{{$method.Name}}";

// {{$method.Name}}ServiceRoutePath defines the full method path for the {{$method.Name}} method.
export const {{$method.Name}}ServiceRoutePath = "/rpkit/{{$ServiceName}}.{{$Itr.Object.Name.Name}}/{{$method.Name}}";

// {{$method.Name}}ContractSource contains the source version of expected method contract.
export const {{$method.Name}}ContractSource = `type {{$method.Name}}MethodContract interface {
	{{$method.Name}}({{$method.ArgumentList true}}) {{ if $method.HasReturns }}{{if equal $method.TotalReturns 1}} {{$method.ReturnList true}} {{else}} ({{$method.ReturnList true}}) {{end}} {{end}}
}
`;
{{$retType := $method.GetReturnsAt 0}}{{ if $retType.IsStruct}}
// {{$method.Name}}Method{{$retType.Type | capitalize}}Factory defines a function to
// return a default object containing default field values of return value of
// {{$method.Name}} method.
export function {{$method.Name}}Method{{$retType.Type | capitalize}}Factory(){
    return JSON.parse({{ $retType.GetStructJSON | quote}});
}
{{end}}

// {{$method.Name}}Client returns a RPC method to be called to handle requests
// for the {{$method.Name}} method of {{quote $Itr.Path}}.
export function {{$method.Name}}Client(options) {
    if (options.BeforeRequest && typeof options.BeforeRequest !== "function") {
        throw new Error("options.BeforeRequest must be a function");
    }

    if (options.Headers && typeof options.Headers !== "object") {
        throw new Error("options.Headers must be a object map");
    }

    // encoders must be functions that returns promises from their Encode methods.
    if (options.Encoder && typeof options.Encoder.Encode !== "function") {
        throw new Error("Encoder must provide Encoder method");
    }

    // decoders must be functions that returns promises from their Encode methods.
    if (options.Decoder && typeof options.Decoder.Decode !== "function") {
        throw new Error("Decoder must provide Decode method");
    }

    // Transport must be function that returns promises from their calls.
    if (options.Transport && typeof options.Transport.Do !== "function") {
        throw new Error("Transport must provide Do method");
    }

    if (!options.ServiceAddr) {
        throw new Error("options must provide a ServiceAddr pointing to service http server");
    }

    if (!options.Headers) options.Headers = {};
    if (!options.Encoder) options.Encoder = JSONEncoding;
    if (!options.Decoder) options.Decoder = JSONEncoding;
    if (!options.Transport) options.Transport = HTTPTransport;

    return function {{$method.Name}}RPC() {
        return new Promise(function GetUserPromise(resolve, reject) {
            const req = newRequest(options.ServiceAddr, {{$method.Name}}ServiceRoutePath, options.Headers);
            req.setHeader("X-Client", "JS-RPKIT")
            req.setHeader("X-Service", BaseServiceName)
            req.setHeader("X-Package", {{quote $Itr.Path}})
            req.setHeader("X-Method-Client", {{quote $method.Name}})
            req.setHeader("X-Method-ClientService", MethodServiceName)
            req.setHeader("X-API-Client-Route", {{$method.Name}}ServiceRoute)
            req.setHeader("X-API-Client-Route-Path", {{$method.Name}}ServiceRoutePath)
            req.setHeader("X-Client-Package-Interface", "{{$Itr.Package}}.{{$Itr.Object.Name.Name}}")

            if (options.BeforeRequest) options.BeforeRequest(req);

            Promise.resolve(true).then(() => {
                return options.Transport.Do(req);
            }).then((resObj) => {
                return options.Decoder.Decode(req, resObj.res, resObj.body);
            }).then((resModel) => {
                resolve(resModel);
            }).catch((err) => {
                reject(err);
            });
        });
    };
};

{{end}}
{{range $_, $method := .OutputWithNoErrorMethods}}
// /////////////////////////////////////////////////////////////////
// RP: Output Returning No Error methods
// Method: {{$method.Name}}
// Source: {{$Itr.Path}}
// Handler: {{$Itr.Package}}.{{$Itr.Object.Name.Name}}.{{$method.Name}}
// /////////////////////////////////////////////////////////////////

// {{$method.Name}}ServiceRoute defines the route for the {{$method.Name}} method.
export const {{$method.Name}}ServiceRoute = "{{$ServiceName}}.{{$Itr.Object.Name.Name}}/{{$method.Name}}";

// {{$method.Name}}ServiceRoutePath defines the full method path for the {{$method.Name}} method.
export const {{$method.Name}}ServiceRoutePath = "/rpkit/{{$ServiceName}}.{{$Itr.Object.Name.Name}}/{{$method.Name}}";

// {{$method.Name}}ContractSource contains the source version of expected method contract.
export const {{$method.Name}}ContractSource = `type {{$method.Name}}MethodContract interface {
	{{$method.Name}}({{$method.ArgumentList true}}) {{ if $method.HasReturns }}{{if equal $method.TotalReturns 1}} {{$method.ReturnList true}} {{else}} ({{$method.ReturnList true}}) {{end}} {{end}}
}
`;

{{$retType := $method.GetReturnsAt 0}}{{ if $retType.IsStruct}}
// {{$method.Name}}Method{{$retType.Type | capitalize}}Factory defines a function to
// return a default object containing default field values of return value of
// {{$method.Name}} method.
export function {{$method.Name}}Method{{$retType.Type | capitalize}}Factory(){
    return JSON.parse({{ $retType.GetStructJSON | quote}});
}
{{end}}

// {{$method.Name}}Client returns a RPC method to be called to handle requests
// for the {{$method.Name}} method of {{quote $Itr.Path}}.
export function {{$method.Name}}Client(options) {
    if (options.BeforeRequest && typeof options.BeforeRequest !== "function") {
        throw new Error("options.BeforeRequest must be a function");
    }

    if (options.Headers && typeof options.Headers !== "object") {
        throw new Error("options.Headers must be a object map");
    }

    // encoders must be functions that returns promises from their Encode methods.
    if (options.Encoder && typeof options.Encoder.Encode !== "function") {
        throw new Error("Encoder must provide Encoder method");
    }

    // decoders must be functions that returns promises from their Encode methods.
    if (options.Decoder && typeof options.Decoder.Decode !== "function") {
        throw new Error("Decoder must provide Decode method");
    }

    // Transport must be function that returns promises from their calls.
    if (options.Transport && typeof options.Transport.Do !== "function") {
        throw new Error("Transport must provide Do method");
    }

    if (!options.ServiceAddr) {
        throw new Error("options must provide a ServiceAddr pointing to service http server");
    }

    if (!options.Headers) options.Headers = {};
    if (!options.Encoder) options.Encoder = JSONEncoding;
    if (!options.Decoder) options.Decoder = JSONEncoding;
    if (!options.Transport) options.Transport = HTTPTransport;

    return function {{$method.Name}}RPC() {
        return new Promise(function GetUserPromise(resolve, reject) {
            const req = newRequest(options.ServiceAddr, {{$method.Name}}ServiceRoutePath, options.Headers);
            req.setHeader("X-Client", "JS-RPKIT")
            req.setHeader("X-Service", BaseServiceName)
            req.setHeader("X-Package", {{quote $Itr.Path}})
            req.setHeader("X-Method-Client", {{quote $method.Name}})
            req.setHeader("X-Method-ClientService", MethodServiceName)
            req.setHeader("X-API-Client-Route", {{$method.Name}}ServiceRoute)
            req.setHeader("X-API-Client-Route-Path", {{$method.Name}}ServiceRoutePath)
            req.setHeader("X-Client-Package-Interface", "{{$Itr.Package}}.{{$Itr.Object.Name.Name}}")

            if (options.BeforeRequest) options.BeforeRequest(req);

            Promise.resolve(true).then(() => {
                return options.Transport.Do(req);
            }).then((resObj) => {
                return options.Decoder.Decode(req, resObj.res, resObj.body);
            }).then((resModel) => {
                resolve(resModel);
            }).catch((err) => {
                reject(err);
            });
        });
    };
};

{{end}}
{{range $_, $method := .InputWithErrorMethods}}
// /////////////////////////////////////////////////////////////////
// RP: Input Returning Only Error methods
// Method: {{$method.Name}}
// Source: {{$Itr.Path}}
// Handler: {{$Itr.Package}}.{{$Itr.Object.Name.Name}}.{{$method.Name}}
// /////////////////////////////////////////////////////////////////

// {{$method.Name}}ServiceRoute defines the route for the {{$method.Name}} method.
export const {{$method.Name}}ServiceRoute = "{{$ServiceName}}.{{$Itr.Object.Name.Name}}/{{$method.Name}}";

// {{$method.Name}}ServiceRoutePath defines the full method path for the {{$method.Name}} method.
export const {{$method.Name}}ServiceRoutePath = "/rpkit/{{$ServiceName}}.{{$Itr.Object.Name.Name}}/{{$method.Name}}";

// {{$method.Name}}ContractSource contains the source version of expected method contract.
export const {{$method.Name}}ContractSource = `type {{$method.Name}}MethodContract interface {
	{{$method.Name}}({{$method.ArgumentList true}}) {{ if $method.HasReturns }}{{if equal $method.TotalReturns 1}} {{$method.ReturnList true}} {{else}} ({{$method.ReturnList true}}) {{end}} {{end}}
}
`;

{{ $argsType := $method.GetArgsAt 0 }}{{if $argsType.IsStruct}}
// {{$method.Name}}Method{{$argsType.Type | capitalize}}Factory defines a function to
// return a default object containing default field values of argument of
// {{$method.Name}} method.
export function {{$method.Name}}Method{{$argsType.Type | capitalize}}Factory(){
    return JSON.parse({{ $argsType.GetStructJSON | quote}});
}
{{end}}

{{ $argsType := $method.GetArgsAt 1 }}{{if $argsType.IsStruct}}
// {{$method.Name}}Method{{$argsType.Type | capitalize}}Factory defines a function to
// return a default object containing default field values of argument of
// {{$method.Name}} method.
export function {{$method.Name}}Method{{$argsType.Type | capitalize}}Factory(){
    return JSON.parse({{ $argsType.GetStructJSON | quote}});
}
{{end}}

// {{$method.Name}}Client returns a RPC method to be called to handle requests
// for the {{$method.Name}} method of {{quote $Itr.Path}}.
export function {{$method.Name}}Client(options) {
    if (options.BeforeRequest && typeof options.BeforeRequest !== "function") {
        throw new Error("options.BeforeRequest must be a function");
    }

    if (options.Headers && typeof options.Headers !== "object") {
        throw new Error("options.Headers must be a object map");
    }

    // encoders must be functions that returns promises from their Encode methods.
    if (options.Encoder && typeof options.Encoder.Encode !== "function") {
        throw new Error("Encoder must provide Encoder method");
    }

    // decoders must be functions that returns promises from their Encode methods.
    if (options.Decoder && typeof options.Decoder.Decode !== "function") {
        throw new Error("Decoder must provide Decode method");
    }

    // Transport must be function that returns promises from their calls.
    if (options.Transport && typeof options.Transport.Do !== "function") {
        throw new Error("Transport must provide Do method");
    }

    if (!options.ServiceAddr) {
        throw new Error("options must provide a ServiceAddr pointing to service http server");
    }

    if (!options.Headers) options.Headers = {};
    if (!options.Encoder) options.Encoder = JSONEncoding;
    if (!options.Decoder) options.Decoder = JSONEncoding;
    if (!options.Transport) options.Transport = HTTPTransport;

    return function {{$method.Name}}RPC(model) {
        return new Promise(function GetUserPromise(resolve, reject) {
            const req = newRequest(options.ServiceAddr, {{$method.Name}}ServiceRoutePath, options.Headers);
            req.setHeader("X-Client", "JS-RPKIT")
            req.setHeader("X-Service", BaseServiceName)
            req.setHeader("X-Package", {{quote $Itr.Path}})
            req.setHeader("X-Method-Client", {{quote $method.Name}})
            req.setHeader("X-Method-ClientService", MethodServiceName)
            req.setHeader("X-API-Client-Route", {{$method.Name}}ServiceRoute)
            req.setHeader("X-API-Client-Route-Path", {{$method.Name}}ServiceRoutePath)
            req.setHeader("X-Client-Package-Interface", "{{$Itr.Package}}.{{$Itr.Object.Name.Name}}")

            if (options.BeforeRequest) options.BeforeRequest(req);

            const encoded = options.Encoder.Encode(req, model);
            if (!(encoded instanceof Promise)) {
                reject(new Error("Encoder.Encode does not return a Promise"));
                return
            }

            encoded.then((req) => {
                return options.Transport.Do(req);
            }).then((resObj) => {
                resolve(true);
            }).catch((err) => {
                reject(err);
            });
        });
    };
};

{{ end }}
{{range $_, $method := .InputAndOutputMethods}}
// /////////////////////////////////////////////////////////////////
// RP: Input And Output Only methods
// Method: {{$method.Name}}
// Source: {{$Itr.Path}}
// Handler: {{$Itr.Package}}.{{$Itr.Object.Name.Name}}.{{$method.Name}}
// /////////////////////////////////////////////////////////////////

// {{$method.Name}}ServiceRoute defines the route for the {{$method.Name}} method.
export const {{$method.Name}}ServiceRoute = "{{$ServiceName}}.{{$Itr.Object.Name.Name}}/{{$method.Name}}";

// {{$method.Name}}ServiceRoutePath defines the full method path for the {{$method.Name}} method.
export const {{$method.Name}}ServiceRoutePath = "/rpkit/{{$ServiceName}}.{{$Itr.Object.Name.Name}}/{{$method.Name}}";

// {{$method.Name}}ContractSource contains the source version of expected method contract.
export const {{$method.Name}}ContractSource = `type {{$method.Name}}MethodContract interface {
	{{$method.Name}}({{$method.ArgumentList true}}) {{ if $method.HasReturns }}{{if equal $method.TotalReturns 1}} {{$method.ReturnList true}} {{else}} ({{$method.ReturnList true}}) {{end}} {{end}}
}
`;
{{$retType := $method.GetReturnsAt 0}}{{ if $retType.IsStruct}}
// {{$method.Name}}Method{{$retType.Type | capitalize}}Factory defines a function to
// return a default object containing default field values of return value of
// {{$method.Name}} method.
export function {{$method.Name}}Method{{$retType.Type | capitalize}}Factory(){
    return JSON.parse({{ $retType.GetStructJSON | quote}});
}
{{end}}
{{ $argsType := $method.GetArgsAt 0 }}{{if $argsType.IsStruct}}
// {{$method.Name}}Method{{$argsType.Type | capitalize}}Factory defines a function to
// return a default object containing default field values of argument of
// {{$method.Name}} method.
export function {{$method.Name}}Method{{$argsType.Type | capitalize}}Factory(){
    return JSON.parse({{ $argsType.GetStructJSON | quote}});
}
{{end}}
{{ $argsType := $method.GetArgsAt 1 }}{{if $argsType.IsStruct}}
// {{$method.Name}}Method{{$argsType.Type | capitalize}}Factory defines a function to
// return a default object containing default field values of argument of
// {{$method.Name}} method.
export function {{$method.Name}}Method{{$argsType.Type | capitalize}}Factory(){
    return JSON.parse({{ $argsType.GetStructJSON | quote}});
}
{{end}}

// {{$method.Name}}Client returns a RPC method to be called to handle requests
// for the {{$method.Name}} method of {{quote $Itr.Path}}.
export function {{$method.Name}}Client(options) {
    if (options.BeforeRequest && typeof options.BeforeRequest !== "function") {
        throw new Error("options.BeforeRequest must be a function");
    }

    if (options.Headers && typeof options.Headers !== "object") {
        throw new Error("options.Headers must be a object map");
    }

    // encoders must be functions that returns promises from their Encode methods.
    if (options.Encoder && typeof options.Encoder.Encode !== "function") {
        throw new Error("Encoder must provide Encoder method");
    }

    // decoders must be functions that returns promises from their Encode methods.
    if (options.Decoder && typeof options.Decoder.Decode !== "function") {
        throw new Error("Decoder must provide Decode method");
    }

    // Transport must be function that returns promises from their calls.
    if (options.Transport && typeof options.Transport.Do !== "function") {
        throw new Error("Transport must provide Do method");
    }

    if (!options.ServiceAddr) {
        throw new Error("options must provide a ServiceAddr pointing to service http server");
    }

    if (!options.Headers) options.Headers = {};
    if (!options.Encoder) options.Encoder = JSONEncoding;
    if (!options.Decoder) options.Decoder = JSONEncoding;
    if (!options.Transport) options.Transport = HTTPTransport;

    return function {{$method.Name}}RPC(model) {
        return new Promise(function GetUserPromise(resolve, reject) {
            const req = newRequest(options.ServiceAddr, {{$method.Name}}ServiceRoutePath, options.Headers);
            req.setHeader("X-Client", "JS-RPKIT")
            req.setHeader("X-Service", BaseServiceName)
            req.setHeader("X-Package", {{quote $Itr.Path}})
            req.setHeader("X-Method-Client", {{quote $method.Name}})
            req.setHeader("X-Method-ClientService", MethodServiceName)
            req.setHeader("X-API-Client-Route", {{$method.Name}}ServiceRoute)
            req.setHeader("X-API-Client-Route-Path", {{$method.Name}}ServiceRoutePath)
            req.setHeader("X-Client-Package-Interface", "{{$Itr.Package}}.{{$Itr.Object.Name.Name}}")

            if (options.BeforeRequest) options.BeforeRequest(req);

            const encoded = options.Encoder.Encode(req, model);
            if (!(encoded instanceof Promise)) {
                reject(new Error("Encoder.Encode does not return a Promise"));
                return
            }

            encoded.then((req) => {
                return options.Transport.Do(req);
            }).then((resObj) => {
                return options.Decoder.Decode(req, resObj.res, resObj.body);
            }).then((resModel) => {
                resolve(resModel);
            }).catch((err) => {
                reject(err);
            });
        });
    };
};

{{end}}
{{range $_, $method := .InputAndOutputWithErrorMethods}}
// /////////////////////////////////////////////////////////////////
// RP: Input And Output Returning Error methods
// Method: {{$method.Name}}
// Source: {{$Itr.Path}}
// Handler: {{$Itr.Package}}.{{$Itr.Object.Name.Name}}.{{$method.Name}}
// /////////////////////////////////////////////////////////////////

// {{$method.Name}}ServiceRoute defines the route for the {{$method.Name}} method.
export const {{$method.Name}}ServiceRoute = "{{$ServiceName}}.{{$Itr.Object.Name.Name}}/{{$method.Name}}";

// {{$method.Name}}ServiceRoutePath defines the full method path for the {{$method.Name}} method.
export const {{$method.Name}}ServiceRoutePath = "/{{$ServiceName}}/{{$Itr.Object.Name.Name}}/{{$method.Name}}";

// {{$method.Name}}ContractSource contains the source version of expected method contract.
export const {{$method.Name}}ContractSource = `type {{$method.Name}}MethodContract interface {
	{{$method.Name}}({{$method.ArgumentList true}}) {{ if $method.HasReturns }}{{if equal $method.TotalReturns 1}} {{$method.ReturnList true}} {{else}} ({{$method.ReturnList true}}) {{end}} {{end}}
}
`;

{{$retType := $method.GetReturnsAt 0}}{{ if $retType.IsStruct}}
// {{$method.Name}}Method{{$retType.Type | capitalize}}Factory defines a function to
// return a default object containing default field values of return value of
// {{$method.Name}} method.
export function {{$method.Name}}Method{{$retType.Type | capitalize}}Factory(){
    return JSON.parse({{ $retType.GetStructJSON | quote}});
}
{{end}}
{{ $argsType := $method.GetArgsAt 0 }}{{if $argsType.IsStruct}}
// {{$method.Name}}Method{{$argsType.Type | capitalize}}Factory defines a function to
// return a default object containing default field values of argument of
// {{$method.Name}} method.
export function {{$method.Name}}Method{{$argsType.Type | capitalize}}Factory(){
    return JSON.parse({{ $argsType.GetStructJSON | quote}});
}
{{end}}
{{ $argsType := $method.GetArgsAt 1 }}{{if $argsType.IsStruct}}
// {{$method.Name}}Method{{$argsType.Type | capitalize}}Factory defines a function to
// return a default object containing default field values of argument of
// {{$method.Name}} method.
export function {{$method.Name}}Method{{$argsType.Type | capitalize}}Factory(){
    return JSON.parse({{ $argsType.GetStructJSON | quote}});
}
{{end}}

// {{$method.Name}}Client returns a RPC method to be called to handle requests
// for the {{$method.Name}} method of {{quote $Itr.Path}}.
export function {{$method.Name}}Client(options) {
    if (options.BeforeRequest && typeof options.BeforeRequest !== "function") {
        throw new Error("options.BeforeRequest must be a function");
    }

    if (options.Headers && typeof options.Headers !== "object") {
        throw new Error("options.Headers must be a object map");
    }

    // encoders must be functions that returns promises from their Encode methods.
    if (options.Encoder && typeof options.Encoder.Encode !== "function") {
        throw new Error("Encoder must provide Encoder method");
    }

    // decoders must be functions that returns promises from their Encode methods.
    if (options.Decoder && typeof options.Decoder.Decode !== "function") {
        throw new Error("Decoder must provide Decode method");
    }

    // Transport must be function that returns promises from their calls.
    if (options.Transport && typeof options.Transport.Do !== "function") {
        throw new Error("Transport must provide Do method");
    }

    if (!options.ServiceAddr) {
        throw new Error("options must provide a ServiceAddr pointing to service http server");
    }

    if (!options.Headers) options.Headers = {};
    if (!options.Encoder) options.Encoder = JSONEncoding;
    if (!options.Decoder) options.Decoder = JSONEncoding;
    if (!options.Transport) options.Transport = HTTPTransport;

    return function {{$method.Name}}RPC(model) {
        return new Promise(function GetUserPromise(resolve, reject) {
            const req = newRequest(options.ServiceAddr, {{$method.Name}}ServiceRoutePath, options.Headers);
            req.setHeader("X-Client", "JS-RPKIT")
            req.setHeader("X-Service", BaseServiceName)
            req.setHeader("X-Package", {{quote $Itr.Path}})
            req.setHeader("X-Method-Client", {{quote $method.Name}})
            req.setHeader("X-Method-ClientService", MethodServiceName)
            req.setHeader("X-API-Client-Route", {{$method.Name}}ServiceRoute)
            req.setHeader("X-API-Client-Route-Path", {{$method.Name}}ServiceRoutePath)
            req.setHeader("X-Client-Package-Interface", "{{$Itr.Package}}.{{$Itr.Object.Name.Name}}")

            if (options.BeforeRequest) options.BeforeRequest(req);

            const encoded = options.Encoder.Encode(req, model);
            if (!(encoded instanceof Promise)) {
                reject(new Error("Encoder.Encode does not return a Promise"));
                return
            }

            encoded.then((req) => {
                return options.Transport.Do(req);
            }).then((resObj) => {
                return options.Decoder.Decode(req, resObj.res, resObj.body);
            }).then((resModel) => {
                resolve(resModel);
            }).catch((err) => {
                reject(err);
            });
        });
    };
};
{{end}}

