// All code below are auto-generated and should not be edited by hand.
// See https://github.com/gokit/rpkit for more info.
{{ $Itr := .Itr}} {{$Pkg := .Pkg}} {{$ServiceName := .ServiceName}}
import (
	"encoding/json"
	"errors"
	"context"
	"io"

	{{if .UsesInternal}}{{quote .Pkg.Path}}{{end}}
	{{range $path, $name := .Imports}}
	{{$name}} {{quote $path}}
	{{end}}
)

// errors ...
var (
	ErrDecodedUnknownType = errors.New("decoder returns unknown type")
)


{{range $name, $arg := .EncodingArgs}}
//****************************************************************************
// {{$name}} Target Function Encoders / Decoders Implementations
// Source: {{$Itr.Path}}
// Used By: {{$Itr.Package}}.{{$Itr.Object.Name.Name}}
//****************************************************************************

// {{getTypeName $name $arg}}TargetEncoder implements a encoder for the {{$name}} type
// using a provided function.
type {{getTypeName $name $arg}}TargetEncoder struct {
	EncoderFunc func(context.Context, io.Writer, {{$name}}) error
}

// Encode implements the encoding function for type {{$name}} used in {{$ServiceName}} by
// calling the underline encoding function to handle the work.
func (td {{getTypeName $name $arg}}TargetEncoder) Encode(ctx context.Context, w io.Writer, payload {{ $name }}) error {
	return td.EncoderFunc(ctx, w, payload)
}

// {{getTypeName $name $arg}}TargetDecoder implements a decoder for the {{$name}} type
// using a provided function.
type {{getTypeName $name $arg}}TargetDecoder struct {
	DecoderFunc func(context.Context,io.Reader) ({{$name}}, error)
}

// Decode implements the decoding function for type {{$name}} used in {{$ServiceName}} by
// calling the underline decoding function to handle the work.
func (td {{getTypeName $name $arg}}TargetDecoder) Decode(ctx context.Context, r io.Reader) ({{ $name }}, error) {
	return td.DecoderFunc(ctx, r)
}

//****************************************************************************
// {{$name}} Type Encoders / Decoders Implementations
// Source: {{$Itr.Path}}
// Used By: {{$Itr.Package}}.{{$Itr.Object.Name.Name}}
//****************************************************************************

// {{getTypeName $name $arg}}TypeEncoder implements a encoder for the {{$name}} type.
type {{getTypeName $name $arg}}TypeEncoder struct {
	Encoder Encoder
}

// Encode implements the encode function for type {{$name}} used in {{$ServiceName}} by
// calling the underline Encoder to handle the work.
func (en {{getTypeName $name $arg}}TypeEncoder) Encode(ctx context.Context, w io.Writer, payload {{ $name }}) error {
	return en.Encoder.Encode(ctx, w, payload)
}

{{if $arg.StructObject }}
// {{getTypeName $name $arg}}TypeDecoder implements a decoder for the {{$name}} type.
type {{getTypeName $name $arg}}TypeDecoder struct {
	Decoder TargetDecoder
}

// Decode implements the decode function for type {{$name}} used in {{$ServiceName}} by
// calling the underline Decoder to handle the work.
func (td {{getTypeName $name $arg}}TypeDecoder) Decode(ctx context.Context,r io.Reader) ({{ $name }}, error) { {{$isPointer := hasPrefix $name "*"}} {{$noPointerName := trimPrefix $name "*"}}
	var res {{$noPointerName}}
	err := td.Decoder.Decode(ctx, r, &res)
	return {{if $isPointer}}&res{{else}}res{{end}}, err
}
{{else}}
// {{getTypeName $name $arg}}TypeDecoder implements a decoder for the {{$name}} type.
type {{getTypeName $name $arg}}TypeDecoder struct {
	Decoder Decoder
}

// Decode implements the decode function for type {{$name}} used in {{$ServiceName}} by
// calling the underline Decoder to handle the work.
func (td {{getTypeName $name $arg}}TypeDecoder) Decode(ctx context.Context,r io.Reader) ({{ $name }}, error) {
	recs, err := td.Decoder.Decode(ctx, r)
	if err != nil {
		return recs.({{$name}}), err
	}

	// Type convert, so we have the right type, which is {{$name}}.
    var ok bool
    var erecs {{$name}}
	if erecs, ok = recs.({{$name}}); ok {
		return erecs, nil
	}

    return erecs, ErrDecodedUnknownType
}
{{end}}
{{end}}

//****************************************************************************
// Encoder and Decoder Types
// Source: {{$Itr.Path}}
//****************************************************************************

// Encoder defines an interface representing a generic encoder which
// expects a interface{} type has it's encoding target.
type Encoder interface{
	Encode(context.Context, io.Writer, interface{}) error
}

// Decoder defines an interface representing a generic decoder which
// returning a interface{} type has it's response.
type Decoder interface{
	Decode(context.Context, io.Reader) (interface{}, error)
}

// TargetDecoder defines an interface representing a target decoder which
// expects a type to decode into.
type TargetDecoder interface{
	Decode(context.Context, io.Reader, interface{}) error
}

//****************************************************************************
// JSON Encoders / Decoders Implementations
// Source: {{$Itr.Path}}
//****************************************************************************

var (
    // DefaultJSONEncoder provides a package-level json encoder for use.
    DefaultJSONEncoder JSONEncoder

    // DefaultJSONTargetDecoder provides a package-level json target decoder for use.
    DefaultJSONTargetDecoder JSONTargetDecoder
)

// JSONEncoder implements a wrapper over the encoding/json JSONEncoder to
// match the Encoder interface. This allow us use JSON has a encoder for
// any method encoding as needed.
type JSONEncoder struct{}

// Encode implements the necessary logic to use json for encoding.
func (JSONEncoder) Encode(ctx context.Context,w io.Writer, payload interface{}) error {
	return json.NewEncoder(w).Encode(payload)
}

// JSONTargetDecoder implements a json decoder that wraps the encoding/json.NewDecoder.
type JSONTargetDecoder struct{}

// Decdode implements the necessary logic to decode data from reader into provided target.
func (JSONTargetDecoder) Decode(ctx context.Context, r io.Reader, data interface{}) error {
	return json.NewDecoder(r).Decode(data)
}

//****************************************************************************
// Func Encoders / Decoders Implementations
// Source: {{$Itr.Path}}
//****************************************************************************

// FuncEncoder implements a wrapper over the custom encoding function
// that handles the logic to encode giving type.
type FuncEncoder struct{
    EncodeFunc func(context.Context, io.Writer, interface{}) error
}

// Encode calls the necessary function internally to encode type.
func (f FuncEncoder) Encode(ctx context.Context, w io.Writer, t interface{}) error {
    if f.EncodeFunc == nil {
        return errors.New("not implemented")
    }
    return f.EncodeFunc(ctx, w, t)
}

// FuncDecoder implements a wrapper over the custom decoding function
// that handles the logic to decode giving data into a type from provided reader.
type FuncDecoder struct{
    DecodeFunc func(context.Context, io.Reader) (interface{}, error)
}

// Decode calls the necessary function internally to decode data to type.
func (f FuncDecoder) Decode(ctx context.Context, r io.Reader) (interface{}, error) {
    if f.DecodeFunc == nil {
        return nil, errors.New("not implemented")
    }
    return f.DecodeFunc(ctx, r)
}

