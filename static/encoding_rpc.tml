// All code below are auto-generated and should not be edited by hand.
// See https://github.com/gokit/rpkit for more info.
{{ $Itr := .Itr}} {{$Pkg := .Pkg}} {{$ServiceName := .ServiceName}}
import (
	"encoding/json"
	"errors"
	"io"

	{{if .UsesInternal}}{{quote .Pkg.Path}}{{end}}
	{{range $path, $name := .Imports}}
	{{$name}} {{quote $path}}
	{{end}}
)

// errors ...
var (
	ErrDecodedUnknownType = errors.New("decoder returns unknown type")
)

//****************************************************************************
// Encoder and Decoder Types
// Source: {{$Itr.Path}}
//****************************************************************************

// Encoder defines an interface representing a generic encoder which
// expects a interface{} type has it's encoding target.
type Encoder interface{
	Encode(io.Writer, interface{}) error
}

// Decoder defines an interface representing a generic decoder which
// returning a interface{} type has it's response.
type Decoder interface{
	Decode(io.Reader) (interface{}, error)
}

// TargetDecoder defines an interface representing a target decoder which
// expects a type to decode into.
type TargetDecoder interface{
	Decode(io.Reader, interface{}) error
}

{{range $name, $arg := .EncodingArgs}}
//****************************************************************************
// {{$name}} Encoders / Decoders Implementations
// Source: {{$Itr.Path}}
// Used By: {{$Itr.Package}}.{{$Itr.Object.Name.Name}}
//****************************************************************************

// {{getTypeName $name}}TypeEncoder implements a encoder for the {{$name}} type.
type {{getTypeName $name}}TypeEncoder struct {
	Encoder Encoder
}

// Encode implements the encode function for type {{$name}} used in {{$ServiceName}} by
// calling the underline Encoder to handle the work.
func (en {{getTypeName $name}}TypeEncoder) Encode(w io.Writer, payload {{ $name }}) error {
	return en.Encoder.Encode(w, payload)
}
{{if $arg.StructObject }}
// {{getTypeName $name}}TypeDecoder implements a decoder for the {{$name}} type.
type {{getTypeName $name}}TypeDecoder struct {
	Decoder TargetDecoder
}

// Decode implements the decode function for type {{$name}} used in {{$ServiceName}} by
// calling the underline Decoder to handle the work.
func (td {{getTypeName $name}}TypeDecoder) Decode(r io.Reader) ({{ $name }}, error) { {{$isPointer := hasPrefix $name "*"}} {{$noPointerName := trimPrefix $name "*"}}
	var res {{$noPointerName}}
	err := td.Decoder.Decode(r, &res)
	return {{if $isPointer}}&res{{else}}res{{end}}, err
}
{{else}}
// {{getTypeName $name}}TypeDecoder implements a decoder for the {{$name}} type.
type {{getTypeName $name}}TypeDecoder struct {
	Decoder Decoder
}

// Decode implements the decode function for type {{$name}} used in {{$ServiceName}} by
// calling the underline Decoder to handle the work.
func (td {{getTypeName $name}}TypeDecoder) Decode(r io.Reader) ({{ $name }}, error) {
	recs, err := td.Decoder.Decode(r)
	if err != nil {
		return recs.({{$name}}), err
	}

	// Type convert, so we have the right type, which is {{$name}}.
	if erecs, ok := recs.({{$name}}); ok {
		return erecs, nil
	}

    return recs.({{$name}}), ErrDecodedUnknownType
}
{{end}}
{{end}}

//****************************************************************************
// Base Encoders / Decoders Implementations
// Source: {{$Itr.Path}}
//****************************************************************************

// JSONEncoder implements a wrapper over the encoding/json JSONEncoder to
// match the Encoder interface. This allow us use JSON has a encoder for
// any method encoding as needed.
type JSONEncoder struct{}

// Encode implements the necessary logic to use json for encoding.
func (JSONEncoder) Encode(w io.Writer, payload interface{}) error {
	return json.NewEncoder(w).Encode(payload)
}

// JSONDecoder implements a wrapper over the encoding/json JSONEncoder to
// all incoming data into a interface{} type.
type JSONDecoder struct{}

// Encode implements the necessary logic to use json for encoding.
func (JSONDecoder) Decode(r io.Reader) (interface{}, error) {
	var data interface{}
	err := json.NewDecoder(r).Decode(&data)
	return data, err
}

// JSONTargetDecoder implements a wrapper over the encoding/json JSONEncoder to
// all incoming data into a interface{} type.
type JSONTargetDecoder struct{}

// Encode implements the necessary logic to use json for encoding to provided
// target of type interface{}.
func (JSONTargetDecoder) Decode(r io.Reader, data interface{}) error {
	return json.NewDecoder(r).Decode(data)
}
