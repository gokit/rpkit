{"version":3,"sources":["webpack://userservicerpjss/webpack/universalModuleDefinition","webpack://userservicerpjss/webpack/bootstrap","webpack://userservicerpjss/./src/app.js","webpack://userservicerpjss/external \"http\"","webpack://userservicerpjss/external {\"commonjs\":\"statuses\",\"commonjs2\":\"statuses\",\"amd\":\"statuses\",\"root\":\"_\"}","webpack://userservicerpjss/external {\"commonjs\":\"url-parse\",\"commonjs2\":\"url-parse\",\"amd\":\"url-parse\",\"root\":\"_\"}"],"names":["JSONErrorResponse","GetService","GetUsersMethodUser","GetUsersService","CreateMethodUser","CreateMethodNewUser","CreateService","GetByService","CreateUserMethodUser","CreateUserMethodNewUser","CreateUserService","GetUserMethodUser","GetUserService","http","require","URL","httpStatus","BaseServiceName","MethodServiceName","ServiceCodePath","ServiceCodePathName","URLError","ActionError","ActionPanicError","MethodTypeError","AcceptTypeUnknownError","RequestDecodingError","ResponseEncodingError","type","code","err","message","meta","Type","Code","Err","Message","Meta","JSONEncoding","Object","freeze","Encode","EncodeJSON","req","res","model","Promise","encodeJSONResolver","resolve","reject","accepts","getHeader","indexOf","Error","data","JSON","stringify","e","setHeader","length","Write","Decode","DecodeJSON","decodeJSONResolver","header","contentType","on","d","push","parse","join","prefixSlash","c","endsWith","GetServiceRoute","GetServiceRoutePath","GetContractSource","GetContract","options","BeforeRequest","BeforeResponse","Headers","Encoder","Decoder","GetServiceMiddleware","next","method","writeHead","write","url","headers","http_method","package","api_base","api_service","route","api","end","key","reqURL","pathname","GetUserServiceRoutePath","then","actionResult","catch","finished","ActinError","GetUsersServiceRoute","GetUsersServiceRoutePath","GetUsersContractSource","GetUsersContract","GetUsersServiceMiddleware","CreateServiceRoute","CreateServiceRoutePath","CreateContractSource","CreateContract","CreateServiceMiddleware","decodePromise","result","GetByServiceRoute","GetByServiceRoutePath","GetByContractSource","GetByContract","GetByServiceMiddleware","CreateUserServiceRoute","CreateUserServiceRoutePath","CreateUserContractSource","CreateUserContract","CreateUserServiceMiddleware","GetUserServiceRoute","GetUserContractSource","GetUserContract","GetUserServiceMiddleware"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"statuses\"), require(\"url-parse\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"statuses\", \"url-parse\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"userservicerpjss\"] = factory(require(\"statuses\"), require(\"url-parse\"));\n\telse\n\t\troot[\"userservicerpjss\"] = factory(root[\"_\"], root[\"_\"]);\n})(global, function(__WEBPACK_EXTERNAL_MODULE_statuses__, __WEBPACK_EXTERNAL_MODULE_url_parse__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/app.js\");\n","// All code below are auto-generated and should not be edited by hand.\n// See https://github.com/gokit/rpkit for more info.\n  \n\nconst http = require(\"http\");\nconst URL = require(\"url-parse\");\nconst httpStatus = require(\"statuses\");\n\n// BaseServiceName defines the base name of service root.\nexport const BaseServiceName = \"users\";\n\n// MethodServiceName defines the complete name of this giving API service.\nexport const MethodServiceName = \"users/UserService\";\n\n// ServiceCodePath defines the path to this generated package which contains the implemented service methods.\nexport const ServiceCodePath = \"github.com/gokit/rpkit/examples/users/userservicerp\";\n\n// ServiceCodePathName defines the name giving to\n// this package.\nexport const ServiceCodePathName = \"userservicerp\";\n\n// error type strings\nexport const URLError = \"url_error\";\nexport const ActionError = \"action_error\";\nexport const ActionPanicError = \"action_panic_error\";\nexport const MethodTypeError = \"method_type_error\";\nexport const AcceptTypeUnknownError = \"accept_type_unknown_error\";\nexport const RequestDecodingError = \"request_decoding_error\";\nexport const ResponseEncodingError = \"response_encoding_error\";\n\n// JSONErrorResponse defines a structure to contain error message data\n// delivered by the server.\nexport function JSONErrorResponse(type, code, err, message, meta) {\n    return {\n        Type: type,\n        Code: code,\n        Err: err,\n        Message: message,\n        Meta: meta,\n    }\n}\n\n// JSONEncoding implements a Object that possess methods\n// able to encode and decode a json response.\nconst JSONEncoding = Object.freeze({\n    Encode: function EncodeJSON(req, res, model) {\n        return new Promise(function encodeJSONResolver(resolve, reject) {\n            const accepts = req.getHeader(\"accept\");\n            if (!accepts.indexOf(\"application/json\")) {\n                reject(new Error(\"request does not accept json\"));\n                return;\n            }\n\n            let data = null;\n\n            try{\n                data = JSON.stringify(model);\n            }catch(e){\n                reject(e);\n                return;\n            }\n\n            res.setHeader(\"Content-Type\", \"application/json\");\n            res.setHeader(\"Content-Length\", data.length);\n            res.Write(data);\n            resolve(true);\n        });\n    },\n    Decode: function DecodeJSON(req) {\n        return new Promise(function decodeJSONResolver(resolve, reject) {\n            if (req.header.contentType.indexOf(\"application/json\") === -1) {\n                reject(new Error(\"request content type must be application/json\"));\n                return\n            }\n\n            const data = [];\n            req.on(\"data\", (d) => data.push(d));\n            req.on(\"end\", () => {\n                try {\n                    const model = JSON.parse(data.join(\"\"));\n                    resolve(model);\n                } catch (err) {\n                    reject(err);\n                }\n            });\n            req.on(\"error\", (err) => {\n                reject(err);\n            });\n        });\n    },\n});\n\nfunction prefixSlash(c) {\n    if (c.endsWith(\"/\")) {\n        return c;\n    }\n    return `${c};`;\n};\n\n\n\n// /////////////////////////////////////////////////////////////////\n// RP: Output with Returning Error methods\n// Method: Get\n// Source: github.com/gokit/rpkit/examples/users\n// Handler: users.UserService.Get\n// /////////////////////////////////////////////////////////////////\n\n// GetServiceRoute defines the route for the Get method.\nexport const GetServiceRoute = \"users.UserService/Get\";\n\n// GetServiceRoutePath defines the full method path for the Get method.\nexport const GetServiceRoutePath = \"/rpkit/users.UserService/Get\";\n\n// GetContractSource contains the source version of expected method contract.\nexport const GetContractSource = `type GetMethodContract interface {\n\tGet(var1 context.Context)  (int,error)  \n}\n`;\n\n\n\n// GetService returns a middleware-aware function which services\n// server-based requests for the GetByContract method. The GetByContract\n// must return a promise, which must be used for receiving a response.\nexport function GetService(GetContract, options) {\n    if (options.BeforeRequest && typeof options.BeforeRequest !== \"function\") {\n        throw new Error(\"options.BeforeRequest must be a function\");\n    }\n\n    if (options.BeforeResponse && typeof options.BeforeResponse !== \"function\") {\n        throw new Error(\"options.BeforeResponse must be a function\");\n    }\n\n    if (options.Headers && typeof options.Headers !== \"object\") {\n        throw new Error(\"options.Headers must be a object map\");\n    }\n\n    // encoders must be functions that returns promises from their Encode methods.\n    if (options.Encoder && typeof options.Encoder.Encode !== \"function\") {\n        throw new Error(\"Encoder must provide Encoder function\");\n    }\n\n    // decoders must be functions that returns promises from their Encode methods.\n    if (options.Decoder && typeof options.Decoder.Decode !== \"function\") {\n        throw new Error(\"Decoder must provide Decode function\");\n    }\n\n    if (!options.Headers) options.Headers = {};\n    if (!options.Encoder) options.Encoder = JSONEncoding;\n    if (!options.Decoder) options.Decoder = JSONEncoding;\n\n    return function GetServiceMiddleware(req, res, next) {\n        if ([\"HEAD\", \"POST\"].indexOf(req.method) === -1) {\n            res.writeHead(httpStatus[\"not allowed\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"not allowed\"],\n                \"method not served\",\n                \"not servicing method, only posts or head\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Get\",\n                    api_service: MethodServiceName,\n                    route: GetServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return\n        }\n\n        res.setHeader(\"X-Agent\", \"RPKIT\")\n        res.setHeader(\"X-Service\", BaseServiceName)\n        res.setHeader(\"X-Package\", \"github.com/gokit/rpkit/examples/users\")\n        res.setHeader(\"X-Method\", \"Get\")\n        res.setHeader(\"X-Method-Service\", MethodServiceName)\n        res.setHeader(\"X-API-Route\", GetServiceRoute)\n        res.setHeader(\"X-Package-Interface\", \"users.UserService\")\n\n        for (let key in options.Headers) {\n            res.setHeader(key, options.Headers[key]);\n        }\n\n        if (req.method === \"HEAD\") {\n            res.writeHead(httpStatus[\"no content\"], {});\n            return\n        }\n\n        const reqURL = URL(req.url);\n        if (!(prefixSlash(reqURL.pathname).endsWith(prefixSlash(GetUserServiceRoutePath)))) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"bad request\"],\n                \"method can not be served\",\n                \"not servicing method, only POST or HEAD\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Get\",\n                    api_service: MethodServiceName,\n                    route: GetServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return\n        }\n\n        Promise.resolve(true).then(() => {\n            const actionResult = GetContract(req);\n            if (!(actionResult instanceof Promise)) {\n                res.writeHead(httpStatus[\"bad request\"], {\n                    \"Content-Type\": \"application/json\",\n                });\n\n                res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                    httpStatus[\"bad request\"],\n                    \"method failed to return promise\",\n                    new Error(\"Promise expected as return from method\"), {\n                        url: req.url,\n                        headers: req.headers,\n                        http_method: req.method,\n                        package: \"github.com/gokit/rpkit/examples/users\",\n                        api_base: BaseServiceName,\n                        method: \"Get\",\n                        api_service: MethodServiceName,\n                        route: GetServiceRoute,\n                        api: \"users.UserService\",\n                    })));\n\n                res.end();\n                return\n            }\n\n            return actionResult;\n        }).catch((err) => {\n            if (res.finished) {\n                return\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActinError,\n                httpStatus[\"bad request\"],\n                \"method returned with an error\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Get\",\n                    api_service: MethodServiceName,\n                    route: GetServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        }).then((model) => {\n            return options.Encoder.Encode(req, res, model);\n        }).catch((err) => {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ResponseEncodingError,\n                httpStatus[\"bad request\"],\n                \"failed to encode response\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Get\",\n                    api_service: MethodServiceName,\n                    route: GetServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        }).then(() => {\n            res.end();\n        });\n\n        if (next && typeof next == \"function\") next();\n    };\n};\n\n\n\n// /////////////////////////////////////////////////////////////////\n// RP: Output Returning No Error methods\n// Method: GetUsers\n// Source: github.com/gokit/rpkit/examples/users\n// Handler: users.UserService.GetUsers\n// /////////////////////////////////////////////////////////////////\n\n// GetUsersServiceRoute defines the route for the GetUsers method.\nexport const GetUsersServiceRoute = \"users.UserService/GetUsers\";\n\n// GetUsersServiceRoutePath defines the full method path for the GetUsers method.\nexport const GetUsersServiceRoutePath = \"/rpkit/users.UserService/GetUsers\";\n\n// GetUsersContractSource contains the source version of expected method contract.\nexport const GetUsersContractSource = `type GetUsersMethodContract interface {\n\tGetUsers(var1 context.Context)  users.User  \n}\n`;\n\n\n// GetUsersMethodUser defines a function to\n// return a default object containing default field values of return value of\n// GetUsers method.\nexport function GetUsersMethodUser(){\n    return JSON.parse(\"{\\n\\n\\n    \\\"id\\\":\\t0,\\n\\n    \\\"name\\\":\\t\\\"\\\",\\n\\n    \\\"addr\\\":\\t\\\"\\\",\\n\\n    \\\"cid\\\":\\t0.0\\n\\n}\");\n}\n\n\n// GetUsersService returns a middleware-aware function which services\n// server-based requests for the GetByContract method. The GetByContract\n// must return a promise, which must be used for receiving a response.\nexport function GetUsersService(GetUsersContract, options) {\n    if (options.BeforeRequest && typeof options.BeforeRequest !== \"function\") {\n        throw new Error(\"options.BeforeRequest must be a function\");\n    }\n\n    if (options.BeforeResponse && typeof options.BeforeResponse !== \"function\") {\n        throw new Error(\"options.BeforeResponse must be a function\");\n    }\n\n    if (options.Headers && typeof options.Headers !== \"object\") {\n        throw new Error(\"options.Headers must be a object map\");\n    }\n\n    // encoders must be functions that returns promises from their Encode methods.\n    if (options.Encoder && typeof options.Encoder.Encode !== \"function\") {\n        throw new Error(\"Encoder must provide Encoder function\");\n    }\n\n    // decoders must be functions that returns promises from their Encode methods.\n    if (options.Decoder && typeof options.Decoder.Decode !== \"function\") {\n        throw new Error(\"Decoder must provide Decode function\");\n    }\n\n    if (!options.Headers) options.Headers = {};\n    if (!options.Encoder) options.Encoder = JSONEncoding;\n    if (!options.Decoder) options.Decoder = JSONEncoding;\n\n    return function GetUsersServiceMiddleware(req, res, next) {\n        if ([\"HEAD\", \"POST\"].indexOf(req.method) === -1) {\n            res.writeHead(httpStatus[\"not allowed\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"not allowed\"],\n                \"method not served\",\n                \"not servicing method, only posts or head\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUsers\",\n                    api_service: MethodServiceName,\n                    route: GetUsersServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return\n        }\n        \n        res.setHeader(\"X-Agent\", \"RPKIT\")\n        res.setHeader(\"X-Service\", BaseServiceName)\n        res.setHeader(\"X-Package\", \"github.com/gokit/rpkit/examples/users\")\n        res.setHeader(\"X-Method\", \"GetUsers\")\n        res.setHeader(\"X-Method-Service\", MethodServiceName)\n        res.setHeader(\"X-API-Route\", GetUsersServiceRoute)\n        res.setHeader(\"X-Package-Interface\", \"users.UserService\")\n\n        for (let key in options.Headers) {\n            res.setHeader(key, options.Headers[key]);\n        }\n\n        if (req.method === \"HEAD\") {\n            res.writeHead(httpStatus[\"no content\"], {});\n            return\n        }\n\n        const reqURL = URL(req.url);\n        if (!(prefixSlash(reqURL.pathname).endsWith(prefixSlash(GetUserServiceRoutePath)))) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"bad request\"],\n                \"method can not be served\",\n                \"not servicing method, only POST or HEAD\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUsers\",\n                    api_service: MethodServiceName,\n                    route: GetUsersServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return\n        }\n\n        Promise.resolve(true).then(() => {\n            const actionResult = GetUsersContract(req);\n            if (!(actionResult instanceof Promise)) {\n                res.writeHead(httpStatus[\"bad request\"], {\n                    \"Content-Type\": \"application/json\",\n                });\n\n                res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                    httpStatus[\"bad request\"],\n                    \"method failed to return promise\",\n                    new Error(\"Promise expected as return from method\"), {\n                        url: req.url,\n                        headers: req.headers,\n                        http_method: req.method,\n                        package: \"github.com/gokit/rpkit/examples/users\",\n                        api_base: BaseServiceName,\n                        method: \"GetUsers\",\n                        api_service: MethodServiceName,\n                        route: GetUsersServiceRoute,\n                        api: \"users.UserService\",\n                    })));\n\n                res.end();\n                return\n            }\n\n            return actionResult;\n        }).catch((err) => {\n            if (res.finished) {\n                return\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActinError,\n                httpStatus[\"bad request\"],\n                \"method returned with an error\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUsers\",\n                    api_service: MethodServiceName,\n                    route: GetUsersServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        }).then((model) => {\n            return options.Encoder.Encode(req, res, model);\n        }).catch((err) => {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ResponseEncodingError,\n                httpStatus[\"bad request\"],\n                \"failed to encode response\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUsers\",\n                    api_service: MethodServiceName,\n                    route: GetUsersServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        }).then(() => {\n            res.end();\n        });\n\n        if (next && typeof next == \"function\") next();\n    };\n};\n\n\n\n\n\n// /////////////////////////////////////////////////////////////////\n// RP: Input And Output Returning Error methods\n// Method: Create\n// Source: github.com/gokit/rpkit/examples/users\n// Handler: users.UserService.Create\n// /////////////////////////////////////////////////////////////////\n\n// CreateServiceRoute defines the route for the Create method.\nexport const CreateServiceRoute = \"users.UserService/Create\";\n\n// CreateServiceRoutePath defines the full method path for the Create method.\nexport const CreateServiceRoutePath = \"/users/UserService/Create\";\n\n// CreateContractSource contains the source version of expected method contract.\nexport const CreateContractSource = `type CreateMethodContract interface {\n\tCreate(var1 context.Context,var2 users.NewUser)  (users.User,error)  \n}\n`;\n\n\n// CreateMethodUser defines a function to\n// return a default object containing default field values of return value of\n// Create method.\nexport function CreateMethodUser(){\n    return JSON.parse(\"{\\n\\n\\n    \\\"name\\\":\\t\\\"\\\",\\n\\n    \\\"addr\\\":\\t\\\"\\\",\\n\\n    \\\"cid\\\":\\t0.0,\\n\\n    \\\"id\\\":\\t0\\n\\n}\");\n}\n\n\n\n// CreateMethodNewUser defines a function to\n// return a default object containing default field values of argument of\n// Create method.\nexport function CreateMethodNewUser(){\n    return JSON.parse(\"{\\n\\n\\n    \\\"name\\\":\\t\\\"\\\"\\n\\n}\");\n}\n\n\n// CreateService returns a middleware-aware function which services\n// server-based requests for the GetByContract method. The GetByContract\n// must return a promise, which must be used for receiving a response.\nexport function CreateService(CreateContract, options) {\n    if (options.BeforeRequest && typeof options.BeforeRequest !== \"function\") {\n        throw new Error(\"options.BeforeRequest must be a function\");\n    }\n\n    if (options.BeforeResponse && typeof options.BeforeResponse !== \"function\") {\n        throw new Error(\"options.BeforeResponse must be a function\");\n    }\n\n    if (options.Headers && typeof options.Headers !== \"object\") {\n        throw new Error(\"options.Headers must be a object map\");\n    }\n\n    // encoders must be functions that returns promises from their Encode methods.\n    if (options.Encoder && typeof options.Encoder.Encode !== \"function\") {\n        throw new Error(\"Encoder must provide Encoder function\");\n    }\n\n    // decoders must be functions that returns promises from their Encode methods.\n    if (options.Decoder && typeof options.Decoder.Decode !== \"function\") {\n        throw new Error(\"Decoder must provide Decode function\");\n    }\n\n    if (!options.Headers) options.Headers = {};\n    if (!options.Encoder) options.Encoder = JSONEncoding;\n    if (!options.Decoder) options.Decoder = JSONEncoding;\n\n    return function CreateServiceMiddleware(req, res, next) {\n        if ([\"HEAD\", \"POST\"].indexOf(req.method) === -1) {\n            res.writeHead(httpStatus[\"not allowed\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"not allowed\"],\n                \"method not served\",\n                \"not servicing method, only posts or head\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Create\",\n                    api_service: MethodServiceName,\n                    route: CreateServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return\n        }\n        \n        res.setHeader(\"X-Agent\", \"RPKIT\")\n        res.setHeader(\"X-Service\", BaseServiceName)\n        res.setHeader(\"X-Package\", \"github.com/gokit/rpkit/examples/users\")\n        res.setHeader(\"X-Method\", \"Create\")\n        res.setHeader(\"X-Method-Service\", MethodServiceName)\n        res.setHeader(\"X-API-Route\", CreateServiceRoute)\n        res.setHeader(\"X-Package-Interface\", \"users.UserService\")\n\n        for (let key in options.Headers) {\n            res.setHeader(key, options.Headers[key]);\n        }\n\n        if (req.method === \"HEAD\") {\n            res.writeHead(httpStatus[\"no content\"], {});\n            return\n        }\n\n        const reqURL = URL(req.url);\n        if (!(prefixSlash(reqURL.pathname).endsWith(prefixSlash(GetUserServiceRoutePath)))) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"bad request\"],\n                \"method can not be served\",\n                \"not servicing method, only POST or HEAD\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Create\",\n                    api_service: MethodServiceName,\n                    route: CreateServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return\n        }\n\n        const decodePromise = options.Decoder.Decode(req);\n        decodePromise.catch((err) => {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                httpStatus[\"bad request\"],\n                \"failed to decode request body\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Create\",\n                    api_service: MethodServiceName,\n                    route: CreateServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        decodePromise.then((result) => {\n            const actionResult = CreateContract(req, result);\n            if (!(actionResult instanceof Promise)) {\n                res.writeHead(httpStatus[\"bad request\"], {\n                    \"Content-Type\": \"application/json\",\n                });\n\n                res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                    httpStatus[\"bad request\"],\n                    \"method failed to return promise\",\n                    new Error(\"Promise expected as return from method\"), {\n                        url: req.url,\n                        headers: req.headers,\n                        http_method: req.method,\n                        package: \"github.com/gokit/rpkit/examples/users\",\n                        api_base: BaseServiceName,\n                        method: \"Create\",\n                        api_service: MethodServiceName,\n                        route: CreateServiceRoute,\n                        api: \"users.UserService\",\n                    })));\n\n                res.end();\n                return\n            }\n\n            return actionResult;\n        }).catch((err) => {\n            if (res.finished) {\n                return\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActinError,\n                httpStatus[\"bad request\"],\n                \"method returned with an error\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Create\",\n                    api_service: MethodServiceName,\n                    route: CreateServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        }).then((model) => {\n            return options.Encoder.Encode(req, res, model);\n        }).catch((err) => {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ResponseEncodingError,\n                httpStatus[\"bad request\"],\n                \"failed to encode response\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Create\",\n                    api_service: MethodServiceName,\n                    route: CreateServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        }).then(() => {\n            res.end();\n        });\n\n        if (next && typeof next == \"function\") next();\n    };\n};\n\n\n// /////////////////////////////////////////////////////////////////\n// RP: Input And Output Returning Error methods\n// Method: GetBy\n// Source: github.com/gokit/rpkit/examples/users\n// Handler: users.UserService.GetBy\n// /////////////////////////////////////////////////////////////////\n\n// GetByServiceRoute defines the route for the GetBy method.\nexport const GetByServiceRoute = \"users.UserService/GetBy\";\n\n// GetByServiceRoutePath defines the full method path for the GetBy method.\nexport const GetByServiceRoutePath = \"/users/UserService/GetBy\";\n\n// GetByContractSource contains the source version of expected method contract.\nexport const GetByContractSource = `type GetByMethodContract interface {\n\tGetBy(var1 context.Context,var2 string)  (int,error)  \n}\n`;\n\n\n\n\n\n// GetByService returns a middleware-aware function which services\n// server-based requests for the GetByContract method. The GetByContract\n// must return a promise, which must be used for receiving a response.\nexport function GetByService(GetByContract, options) {\n    if (options.BeforeRequest && typeof options.BeforeRequest !== \"function\") {\n        throw new Error(\"options.BeforeRequest must be a function\");\n    }\n\n    if (options.BeforeResponse && typeof options.BeforeResponse !== \"function\") {\n        throw new Error(\"options.BeforeResponse must be a function\");\n    }\n\n    if (options.Headers && typeof options.Headers !== \"object\") {\n        throw new Error(\"options.Headers must be a object map\");\n    }\n\n    // encoders must be functions that returns promises from their Encode methods.\n    if (options.Encoder && typeof options.Encoder.Encode !== \"function\") {\n        throw new Error(\"Encoder must provide Encoder function\");\n    }\n\n    // decoders must be functions that returns promises from their Encode methods.\n    if (options.Decoder && typeof options.Decoder.Decode !== \"function\") {\n        throw new Error(\"Decoder must provide Decode function\");\n    }\n\n    if (!options.Headers) options.Headers = {};\n    if (!options.Encoder) options.Encoder = JSONEncoding;\n    if (!options.Decoder) options.Decoder = JSONEncoding;\n\n    return function GetByServiceMiddleware(req, res, next) {\n        if ([\"HEAD\", \"POST\"].indexOf(req.method) === -1) {\n            res.writeHead(httpStatus[\"not allowed\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"not allowed\"],\n                \"method not served\",\n                \"not servicing method, only posts or head\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetBy\",\n                    api_service: MethodServiceName,\n                    route: GetByServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return\n        }\n        \n        res.setHeader(\"X-Agent\", \"RPKIT\")\n        res.setHeader(\"X-Service\", BaseServiceName)\n        res.setHeader(\"X-Package\", \"github.com/gokit/rpkit/examples/users\")\n        res.setHeader(\"X-Method\", \"GetBy\")\n        res.setHeader(\"X-Method-Service\", MethodServiceName)\n        res.setHeader(\"X-API-Route\", GetByServiceRoute)\n        res.setHeader(\"X-Package-Interface\", \"users.UserService\")\n\n        for (let key in options.Headers) {\n            res.setHeader(key, options.Headers[key]);\n        }\n\n        if (req.method === \"HEAD\") {\n            res.writeHead(httpStatus[\"no content\"], {});\n            return\n        }\n\n        const reqURL = URL(req.url);\n        if (!(prefixSlash(reqURL.pathname).endsWith(prefixSlash(GetUserServiceRoutePath)))) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"bad request\"],\n                \"method can not be served\",\n                \"not servicing method, only POST or HEAD\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetBy\",\n                    api_service: MethodServiceName,\n                    route: GetByServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return\n        }\n\n        const decodePromise = options.Decoder.Decode(req);\n        decodePromise.catch((err) => {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                httpStatus[\"bad request\"],\n                \"failed to decode request body\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetBy\",\n                    api_service: MethodServiceName,\n                    route: GetByServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        decodePromise.then((result) => {\n            const actionResult = GetByContract(req, result);\n            if (!(actionResult instanceof Promise)) {\n                res.writeHead(httpStatus[\"bad request\"], {\n                    \"Content-Type\": \"application/json\",\n                });\n\n                res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                    httpStatus[\"bad request\"],\n                    \"method failed to return promise\",\n                    new Error(\"Promise expected as return from method\"), {\n                        url: req.url,\n                        headers: req.headers,\n                        http_method: req.method,\n                        package: \"github.com/gokit/rpkit/examples/users\",\n                        api_base: BaseServiceName,\n                        method: \"GetBy\",\n                        api_service: MethodServiceName,\n                        route: GetByServiceRoute,\n                        api: \"users.UserService\",\n                    })));\n\n                res.end();\n                return\n            }\n\n            return actionResult;\n        }).catch((err) => {\n            if (res.finished) {\n                return\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActinError,\n                httpStatus[\"bad request\"],\n                \"method returned with an error\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetBy\",\n                    api_service: MethodServiceName,\n                    route: GetByServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        }).then((model) => {\n            return options.Encoder.Encode(req, res, model);\n        }).catch((err) => {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ResponseEncodingError,\n                httpStatus[\"bad request\"],\n                \"failed to encode response\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetBy\",\n                    api_service: MethodServiceName,\n                    route: GetByServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        }).then(() => {\n            res.end();\n        });\n\n        if (next && typeof next == \"function\") next();\n    };\n};\n\n\n// /////////////////////////////////////////////////////////////////\n// RP: Input And Output Returning Error methods\n// Method: CreateUser\n// Source: github.com/gokit/rpkit/examples/users\n// Handler: users.UserService.CreateUser\n// /////////////////////////////////////////////////////////////////\n\n// CreateUserServiceRoute defines the route for the CreateUser method.\nexport const CreateUserServiceRoute = \"users.UserService/CreateUser\";\n\n// CreateUserServiceRoutePath defines the full method path for the CreateUser method.\nexport const CreateUserServiceRoutePath = \"/users/UserService/CreateUser\";\n\n// CreateUserContractSource contains the source version of expected method contract.\nexport const CreateUserContractSource = `type CreateUserMethodContract interface {\n\tCreateUser(var1 users.NewUser)  (users.User,error)  \n}\n`;\n\n\n// CreateUserMethodUser defines a function to\n// return a default object containing default field values of return value of\n// CreateUser method.\nexport function CreateUserMethodUser(){\n    return JSON.parse(\"{\\n\\n\\n    \\\"id\\\":\\t0,\\n\\n    \\\"name\\\":\\t\\\"\\\",\\n\\n    \\\"addr\\\":\\t\\\"\\\",\\n\\n    \\\"cid\\\":\\t0.0\\n\\n}\");\n}\n\n\n// CreateUserMethodNewUser defines a function to\n// return a default object containing default field values of argument of\n// CreateUser method.\nexport function CreateUserMethodNewUser(){\n    return JSON.parse(\"{\\n\\n\\n    \\\"name\\\":\\t\\\"\\\"\\n\\n}\");\n}\n\n\n\n// CreateUserService returns a middleware-aware function which services\n// server-based requests for the GetByContract method. The GetByContract\n// must return a promise, which must be used for receiving a response.\nexport function CreateUserService(CreateUserContract, options) {\n    if (options.BeforeRequest && typeof options.BeforeRequest !== \"function\") {\n        throw new Error(\"options.BeforeRequest must be a function\");\n    }\n\n    if (options.BeforeResponse && typeof options.BeforeResponse !== \"function\") {\n        throw new Error(\"options.BeforeResponse must be a function\");\n    }\n\n    if (options.Headers && typeof options.Headers !== \"object\") {\n        throw new Error(\"options.Headers must be a object map\");\n    }\n\n    // encoders must be functions that returns promises from their Encode methods.\n    if (options.Encoder && typeof options.Encoder.Encode !== \"function\") {\n        throw new Error(\"Encoder must provide Encoder function\");\n    }\n\n    // decoders must be functions that returns promises from their Encode methods.\n    if (options.Decoder && typeof options.Decoder.Decode !== \"function\") {\n        throw new Error(\"Decoder must provide Decode function\");\n    }\n\n    if (!options.Headers) options.Headers = {};\n    if (!options.Encoder) options.Encoder = JSONEncoding;\n    if (!options.Decoder) options.Decoder = JSONEncoding;\n\n    return function CreateUserServiceMiddleware(req, res, next) {\n        if ([\"HEAD\", \"POST\"].indexOf(req.method) === -1) {\n            res.writeHead(httpStatus[\"not allowed\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"not allowed\"],\n                \"method not served\",\n                \"not servicing method, only posts or head\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"CreateUser\",\n                    api_service: MethodServiceName,\n                    route: CreateUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return\n        }\n        \n        res.setHeader(\"X-Agent\", \"RPKIT\")\n        res.setHeader(\"X-Service\", BaseServiceName)\n        res.setHeader(\"X-Package\", \"github.com/gokit/rpkit/examples/users\")\n        res.setHeader(\"X-Method\", \"CreateUser\")\n        res.setHeader(\"X-Method-Service\", MethodServiceName)\n        res.setHeader(\"X-API-Route\", CreateUserServiceRoute)\n        res.setHeader(\"X-Package-Interface\", \"users.UserService\")\n\n        for (let key in options.Headers) {\n            res.setHeader(key, options.Headers[key]);\n        }\n\n        if (req.method === \"HEAD\") {\n            res.writeHead(httpStatus[\"no content\"], {});\n            return\n        }\n\n        const reqURL = URL(req.url);\n        if (!(prefixSlash(reqURL.pathname).endsWith(prefixSlash(GetUserServiceRoutePath)))) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"bad request\"],\n                \"method can not be served\",\n                \"not servicing method, only POST or HEAD\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"CreateUser\",\n                    api_service: MethodServiceName,\n                    route: CreateUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return\n        }\n\n        const decodePromise = options.Decoder.Decode(req);\n        decodePromise.catch((err) => {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                httpStatus[\"bad request\"],\n                \"failed to decode request body\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"CreateUser\",\n                    api_service: MethodServiceName,\n                    route: CreateUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        decodePromise.then((result) => {\n            const actionResult = CreateUserContract(req, result);\n            if (!(actionResult instanceof Promise)) {\n                res.writeHead(httpStatus[\"bad request\"], {\n                    \"Content-Type\": \"application/json\",\n                });\n\n                res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                    httpStatus[\"bad request\"],\n                    \"method failed to return promise\",\n                    new Error(\"Promise expected as return from method\"), {\n                        url: req.url,\n                        headers: req.headers,\n                        http_method: req.method,\n                        package: \"github.com/gokit/rpkit/examples/users\",\n                        api_base: BaseServiceName,\n                        method: \"CreateUser\",\n                        api_service: MethodServiceName,\n                        route: CreateUserServiceRoute,\n                        api: \"users.UserService\",\n                    })));\n\n                res.end();\n                return\n            }\n\n            return actionResult;\n        }).catch((err) => {\n            if (res.finished) {\n                return\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActinError,\n                httpStatus[\"bad request\"],\n                \"method returned with an error\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"CreateUser\",\n                    api_service: MethodServiceName,\n                    route: CreateUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        }).then((model) => {\n            return options.Encoder.Encode(req, res, model);\n        }).catch((err) => {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ResponseEncodingError,\n                httpStatus[\"bad request\"],\n                \"failed to encode response\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"CreateUser\",\n                    api_service: MethodServiceName,\n                    route: CreateUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        }).then(() => {\n            res.end();\n        });\n\n        if (next && typeof next == \"function\") next();\n    };\n};\n\n\n// /////////////////////////////////////////////////////////////////\n// RP: Input And Output Returning Error methods\n// Method: GetUser\n// Source: github.com/gokit/rpkit/examples/users\n// Handler: users.UserService.GetUser\n// /////////////////////////////////////////////////////////////////\n\n// GetUserServiceRoute defines the route for the GetUser method.\nexport const GetUserServiceRoute = \"users.UserService/GetUser\";\n\n// GetUserServiceRoutePath defines the full method path for the GetUser method.\nexport const GetUserServiceRoutePath = \"/users/UserService/GetUser\";\n\n// GetUserContractSource contains the source version of expected method contract.\nexport const GetUserContractSource = `type GetUserMethodContract interface {\n\tGetUser(var1 int)  (users.User,error)  \n}\n`;\n\n\n// GetUserMethodUser defines a function to\n// return a default object containing default field values of return value of\n// GetUser method.\nexport function GetUserMethodUser(){\n    return JSON.parse(\"{\\n\\n\\n    \\\"addr\\\":\\t\\\"\\\",\\n\\n    \\\"cid\\\":\\t0.0,\\n\\n    \\\"id\\\":\\t0,\\n\\n    \\\"name\\\":\\t\\\"\\\"\\n\\n}\");\n}\n\n\n\n\n// GetUserService returns a middleware-aware function which services\n// server-based requests for the GetByContract method. The GetByContract\n// must return a promise, which must be used for receiving a response.\nexport function GetUserService(GetUserContract, options) {\n    if (options.BeforeRequest && typeof options.BeforeRequest !== \"function\") {\n        throw new Error(\"options.BeforeRequest must be a function\");\n    }\n\n    if (options.BeforeResponse && typeof options.BeforeResponse !== \"function\") {\n        throw new Error(\"options.BeforeResponse must be a function\");\n    }\n\n    if (options.Headers && typeof options.Headers !== \"object\") {\n        throw new Error(\"options.Headers must be a object map\");\n    }\n\n    // encoders must be functions that returns promises from their Encode methods.\n    if (options.Encoder && typeof options.Encoder.Encode !== \"function\") {\n        throw new Error(\"Encoder must provide Encoder function\");\n    }\n\n    // decoders must be functions that returns promises from their Encode methods.\n    if (options.Decoder && typeof options.Decoder.Decode !== \"function\") {\n        throw new Error(\"Decoder must provide Decode function\");\n    }\n\n    if (!options.Headers) options.Headers = {};\n    if (!options.Encoder) options.Encoder = JSONEncoding;\n    if (!options.Decoder) options.Decoder = JSONEncoding;\n\n    return function GetUserServiceMiddleware(req, res, next) {\n        if ([\"HEAD\", \"POST\"].indexOf(req.method) === -1) {\n            res.writeHead(httpStatus[\"not allowed\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"not allowed\"],\n                \"method not served\",\n                \"not servicing method, only posts or head\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUser\",\n                    api_service: MethodServiceName,\n                    route: GetUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return\n        }\n        \n        res.setHeader(\"X-Agent\", \"RPKIT\")\n        res.setHeader(\"X-Service\", BaseServiceName)\n        res.setHeader(\"X-Package\", \"github.com/gokit/rpkit/examples/users\")\n        res.setHeader(\"X-Method\", \"GetUser\")\n        res.setHeader(\"X-Method-Service\", MethodServiceName)\n        res.setHeader(\"X-API-Route\", GetUserServiceRoute)\n        res.setHeader(\"X-Package-Interface\", \"users.UserService\")\n\n        for (let key in options.Headers) {\n            res.setHeader(key, options.Headers[key]);\n        }\n\n        if (req.method === \"HEAD\") {\n            res.writeHead(httpStatus[\"no content\"], {});\n            return\n        }\n\n        const reqURL = URL(req.url);\n        if (!(prefixSlash(reqURL.pathname).endsWith(prefixSlash(GetUserServiceRoutePath)))) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"bad request\"],\n                \"method can not be served\",\n                \"not servicing method, only POST or HEAD\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUser\",\n                    api_service: MethodServiceName,\n                    route: GetUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return\n        }\n\n        const decodePromise = options.Decoder.Decode(req);\n        decodePromise.catch((err) => {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                httpStatus[\"bad request\"],\n                \"failed to decode request body\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUser\",\n                    api_service: MethodServiceName,\n                    route: GetUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        decodePromise.then((result) => {\n            const actionResult = GetUserContract(req, result);\n            if (!(actionResult instanceof Promise)) {\n                res.writeHead(httpStatus[\"bad request\"], {\n                    \"Content-Type\": \"application/json\",\n                });\n\n                res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                    httpStatus[\"bad request\"],\n                    \"method failed to return promise\",\n                    new Error(\"Promise expected as return from method\"), {\n                        url: req.url,\n                        headers: req.headers,\n                        http_method: req.method,\n                        package: \"github.com/gokit/rpkit/examples/users\",\n                        api_base: BaseServiceName,\n                        method: \"GetUser\",\n                        api_service: MethodServiceName,\n                        route: GetUserServiceRoute,\n                        api: \"users.UserService\",\n                    })));\n\n                res.end();\n                return\n            }\n\n            return actionResult;\n        }).catch((err) => {\n            if (res.finished) {\n                return\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActinError,\n                httpStatus[\"bad request\"],\n                \"method returned with an error\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUser\",\n                    api_service: MethodServiceName,\n                    route: GetUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        }).then((model) => {\n            return options.Encoder.Encode(req, res, model);\n        }).catch((err) => {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ResponseEncodingError,\n                httpStatus[\"bad request\"],\n                \"failed to encode response\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUser\",\n                    api_service: MethodServiceName,\n                    route: GetUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        }).then(() => {\n            res.end();\n        });\n\n        if (next && typeof next == \"function\") next();\n    };\n};\n\n\n\n","module.exports = require(\"http\");","module.exports = __WEBPACK_EXTERNAL_MODULE_statuses__;","module.exports = __WEBPACK_EXTERNAL_MODULE_url_parse__;"],"sourceRoot":""}