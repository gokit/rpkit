{"version":3,"sources":["webpack://userservicerpjss/webpack/universalModuleDefinition","webpack://userservicerpjss/webpack/bootstrap","webpack://userservicerpjss/./src/app.js","webpack://userservicerpjss/external {\"commonjs\":\"lodash\",\"commonjs2\":\"lodash\",\"amd\":\"lodash\",\"root\":\"_\"}","webpack://userservicerpjss/external {\"commonjs\":\"statuses\",\"commonjs2\":\"statuses\",\"amd\":\"statuses\",\"root\":\"_\"}","webpack://userservicerpjss/external {\"commonjs\":\"url-parse\",\"commonjs2\":\"url-parse\",\"amd\":\"url-parse\",\"root\":\"_\"}"],"names":["JSONErrorResponse","FromPromise","PokeService","PokeAgainService","GetService","GetUsersMethodUserSliceFactory","GetUsersService","CreateMethodUserFactory","CreateMethodNewUserFactory","CreateService","GetByService","CreateUserMethodUserFactory","CreateUserMethodNewUserFactory","CreateUserService","GetUserMethodUserFactory","GetUserService","URL","require","lodash","httpStatus","BaseServiceName","MethodServiceName","ServiceCodePath","ServiceCodePathName","URLError","ActionError","ActionPanicError","MethodTypeError","AcceptTypeUnknownError","RequestDecodingError","ResponseEncodingError","type","code","err","message","meta","Type","Code","Err","Message","Meta","rx","ry","Promise","JSONEncoding","Object","freeze","Encode","EncodeJSON","req","res","model","encodeJSONResolver","resolve","reject","accepts","headers","accept","indexOf","Error","data","JSON","stringify","e","setHeader","Buffer","byteLength","write","Decode","DecodeJSON","decodeJSONResolver","on","d","push","parse","join","prefixSlash","c","startsWith","suffixSlash","endsWith","PokeServiceRoute","PokeServiceRoutePath","PokeContractSource","PokeContract","options","BeforeRequest","Headers","Encoder","Decoder","PokeServiceMiddleware","next","method","writeHead","url","http_method","package","api_base","api_service","route","api","end","key","reqURL","pathname","actionResult","then","catch","finished","PokeAgainServiceRoute","PokeAgainServiceRoutePath","PokeAgainContractSource","PokeAgainContract","PokeAgainServiceMiddleware","GetServiceRoute","GetServiceRoutePath","GetContractSource","GetContract","GetServiceMiddleware","m","GetUsersServiceRoute","GetUsersServiceRoutePath","GetUsersContractSource","GetUsersContract","GetUsersServiceMiddleware","CreateServiceRoute","CreateServiceRoutePath","CreateContractSource","CreateContract","CreateServiceMiddleware","decodePromise","actionRes","result","GetByServiceRoute","GetByServiceRoutePath","GetByContractSource","GetByContract","GetByServiceMiddleware","CreateUserServiceRoute","CreateUserServiceRoutePath","CreateUserContractSource","CreateUserContract","CreateUserServiceMiddleware","GetUserServiceRoute","GetUserServiceRoutePath","GetUserContractSource","GetUserContract","GetUserServiceMiddleware"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lodash\"), require(\"statuses\"), require(\"url-parse\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"lodash\", \"statuses\", \"url-parse\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"userservicerpjss\"] = factory(require(\"lodash\"), require(\"statuses\"), require(\"url-parse\"));\n\telse\n\t\troot[\"userservicerpjss\"] = factory(root[\"_\"], root[\"_\"], root[\"_\"]);\n})(global, function(__WEBPACK_EXTERNAL_MODULE_lodash__, __WEBPACK_EXTERNAL_MODULE_statuses__, __WEBPACK_EXTERNAL_MODULE_url_parse__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/app.js\");\n","// All code below are auto-generated and should not be edited by hand.\n// See https://github.com/gokit/rpkit for more info.\n  \nconst URL = require(\"url-parse\");\nconst lodash = require(\"lodash\");\nconst httpStatus = require(\"statuses\");\n\n// BaseServiceName defines the base name of service root.\nexport const BaseServiceName = \"users\"\n\n// MethodServiceName defines the complete name of this giving API service.\nexport const MethodServiceName = \"users/UserService\";\n\n// ServiceCodePath defines the path to this generated package which contains the implemented service methods.\nexport const ServiceCodePath = \"github.com/gokit/rpkit/examples/users/userservicerp\";\n\n// ServiceCodePathName defines the name giving to\n// this package.\nexport const ServiceCodePathName = \"userservicerp\";\n\n// error type strings\nexport const URLError = \"url_error\";\nexport const ActionError = \"action_error\";\nexport const ActionPanicError = \"action_panic_error\";\nexport const MethodTypeError = \"method_type_error\";\nexport const AcceptTypeUnknownError = \"accept_type_unknown_error\";\nexport const RequestDecodingError = \"request_decoding_error\";\nexport const ResponseEncodingError = \"response_encoding_error\";\n\n// JSONErrorResponse defines a structure to contain error message data\n// delivered by the server.\nexport function JSONErrorResponse(type, code, err, message, meta) {\n    return {\n        Type: type,\n        Code: code,\n        Err: err,\n        Message: message,\n        Meta: meta,\n    };\n}\n\n// FromPromise returns a new Promise with the\n// function arguments passed to it. This\n// is provided to allow clients use same\n// promise as package has their are internal\n// checks and use of `instanceof` with the\n// Promise used.\nexport function FromPromise(rx, ry) {\n    return new Promise(rx, ry);\n}\n\n// JSONEncoding implements a Object that possess methods\n// able to encode and decode a json response.\nconst JSONEncoding = Object.freeze({\n    Encode: function EncodeJSON(req, res, model) {\n        return new Promise(function encodeJSONResolver(resolve, reject) {\n            const accepts = req.headers.accept;\n            if (accepts.indexOf(\"application/json\") === -1) {\n                reject(new Error(\"request does not accept json\"));\n                return;\n            }\n\n            let data = null;\n\n            try{\n                data = JSON.stringify(model);\n            }catch(e){\n                reject(e);\n                return;\n            }\n\n            res.setHeader(\"Content-Type\", \"application/json\");\n            res.setHeader(\"Content-Length\", Buffer.byteLength(data));\n            res.write(data);\n            resolve(true);\n        });\n    },\n    Decode: function DecodeJSON(req) {\n        return new Promise(function decodeJSONResolver(resolve, reject) {\n            if (req.headers[\"content-type\"].indexOf(\"application/json\") === -1) {\n                reject(new Error(\"request content type must be application/json\"));\n                return;\n            }\n\n            const data = [];\n            req.on(\"data\", (d) => { data.push(d); });\n            req.on(\"end\", () => {\n                try {\n                    const model = JSON.parse(data.join(\"\"));\n                    resolve(model);\n                } catch (err) {\n                    reject(err);\n                }\n            });\n            req.on(\"error\", (err) => {\n                reject(err);\n            });\n        });\n    },\n});\n\n// prefixSlash prefixes a forward slash to the beginning of provided\n// string.\nfunction prefixSlash(c) {\n    if (c.startsWith(\"/\")) {\n        return c;\n    }\n    return `/${c}`;\n}\n\nfunction suffixSlash(c) {\n    if (c.endsWith(\"/\")) {\n        return c;\n    }\n    return `${c};`;\n}\n\n// /////////////////////////////////////////////////////////////////\n// RP: No Arguments and No Return Methods\n// Method: Poke\n// Source: github.com/gokit/rpkit/examples/users\n// Handler: users.UserService.Poke\n// /////////////////////////////////////////////////////////////////\n\n// PokeServiceRoute defines the route for the Poke method.\nexport const PokeServiceRoute = \"users.UserService/Poke\";\n\n// PokeServiceRoutePath defines the full method path for the Poke method.\nexport const PokeServiceRoutePath = \"/rpkit/users.UserService/Poke\";\n\n// PokeContractSource contains the source version of expected method contract.\nexport const PokeContractSource = `type PokeMethodContract interface {\n\tPoke() \n}`;\n\n// PokeService returns a middleware-aware function which services\n// server-based requests for the GetByContract method. The GetByContract\n// must return a promise, which must be used for receiving a response.\nexport function PokeService(PokeContract, options) {\n    if (options.BeforeRequest && typeof options.BeforeRequest !== \"function\") {\n        throw new Error(\"options.BeforeRequest must be a function\");\n    }\n\n    if (options.Headers && typeof options.Headers !== \"object\") {\n        throw new Error(\"options.Headers must be a object map\");\n    }\n\n    // encoders must be functions that returns promises from their Encode methods.\n    if (options.Encoder && typeof options.Encoder.Encode !== \"function\") {\n        throw new Error(\"Encoder must provide Encoder function\");\n    }\n\n    // decoders must be functions that returns promises from their Encode methods.\n    if (options.Decoder && typeof options.Decoder.Decode !== \"function\") {\n        throw new Error(\"Decoder must provide Decode function\");\n    }\n\n    if (!options.Headers) options.Headers = {}\n    if (!options.Encoder) options.Encoder = JSONEncoding;\n    if (!options.Decoder) options.Decoder = JSONEncoding;\n\n    return function PokeServiceMiddleware(req, res, next) {\n        if ([\"HEAD\", \"POST\"].indexOf(req.method) === -1) {\n            res.writeHead(httpStatus[\"not allowed\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"not allowed\"],\n                \"method not served\",\n                \"not servicing method, only posts or head\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Poke\",\n                    api_service: MethodServiceName,\n                    route: PokeServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        if(options.BeforeRequest) options.BeforeRequest(req);\n\n        res.setHeader(\"X-Agent\", \"RPKIT\");\n        res.setHeader(\"X-Service\", BaseServiceName);\n        res.setHeader(\"X-Package\", \"github.com/gokit/rpkit/examples/users\");\n        res.setHeader(\"X-Method\", \"Poke\");\n        res.setHeader(\"X-Method-Service\", MethodServiceName);\n        res.setHeader(\"X-API-Route\", PokeServiceRoute);\n        res.setHeader(\"X-Package-Interface\", \"users.UserService\");\n\n        for (let key in options.Headers) {\n            res.setHeader(key, options.Headers[key]);\n        }\n\n        if (req.method === \"HEAD\") {\n            res.writeHead(httpStatus[\"no content\"], {});\n            return;\n        }\n\n        const reqURL = URL(req.url);\n        if (!(suffixSlash(reqURL.pathname).endsWith(suffixSlash(PokeServiceRoutePath)))) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"bad request\"],\n                \"method can not be served\",\n                \"not servicing method, only POST or HEAD\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Poke\",\n                    api_service: MethodServiceName,\n                    route: PokeServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        const actionResult = PokeContract(req);\n        if (!(actionResult instanceof Promise)) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActionError,\n                httpStatus[\"bad request\"],\n                \"method failed to return promise\",\n                new Error(\"Promise expected as return from method\"), {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Poke\",\n                    api_service: MethodServiceName,\n                    route: PokeServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        actionResult.then((model) => {\n            res.writeHead(httpStatus[\"no content\"], {});\n            res.end();\n            return model;\n        }).catch((err) => {\n            if (res.finished) {\n                return Promise.reject(err);\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActionError,\n                httpStatus[\"bad request\"],\n                \"method returned with an error\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Poke\",\n                    api_service: MethodServiceName,\n                    route: PokeServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        if (next && typeof next == \"function\") next();\n    };\n}\n\n\n\n// /////////////////////////////////////////////////////////////////\n// RP: Error Returning methods\n// Method: PokeAgain\n// Source: github.com/gokit/rpkit/examples/users\n// Handler: users.UserService.PokeAgain\n// /////////////////////////////////////////////////////////////////\n\n// PokeAgainServiceRoute defines the route for the PokeAgain method.\nexport const PokeAgainServiceRoute = \"users.UserService/PokeAgain\";\n\n// PokeAgainServiceRoutePath defines the full method path for the PokeAgain method.\nexport const PokeAgainServiceRoutePath = \"/rpkit/users.UserService/PokeAgain\";\n\n// PokeAgainContractSource contains the source version of expected method contract.\nexport const PokeAgainContractSource = `type PokeAgainMethodContract interface {\n\tPokeAgain()  error  \n}`;\n\n// PokeAgainService returns a middleware-aware function which services\n// server-based requests for the GetByContract method. The GetByContract\n// must return a promise, which must be used for receiving a response.\nexport function PokeAgainService(PokeAgainContract, options) {\n    if (options.BeforeRequest && typeof options.BeforeRequest !== \"function\") {\n        throw new Error(\"options.BeforeRequest must be a function\");\n    }\n\n    if (options.Headers && typeof options.Headers !== \"object\") {\n        throw new Error(\"options.Headers must be a object map\");\n    }\n\n    // encoders must be functions that returns promises from their Encode methods.\n    if (options.Encoder && typeof options.Encoder.Encode !== \"function\") {\n        throw new Error(\"Encoder must provide Encoder function\");\n    }\n\n    // decoders must be functions that returns promises from their Encode methods.\n    if (options.Decoder && typeof options.Decoder.Decode !== \"function\") {\n        throw new Error(\"Decoder must provide Decode function\");\n    }\n\n    if (!options.Headers) options.Headers = {}\n    if (!options.Encoder) options.Encoder = JSONEncoding;\n    if (!options.Decoder) options.Decoder = JSONEncoding;\n\n    return function PokeAgainServiceMiddleware(req, res, next) {\n        if ([\"HEAD\", \"POST\"].indexOf(req.method) === -1) {\n            res.writeHead(httpStatus[\"not allowed\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"not allowed\"],\n                \"method not served\",\n                \"not servicing method, only posts or head\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"PokeAgain\",\n                    api_service: MethodServiceName,\n                    route: PokeAgainServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        if(options.BeforeRequest) options.BeforeRequest(req);\n\n        res.setHeader(\"X-Agent\", \"RPKIT\");\n        res.setHeader(\"X-Service\", BaseServiceName);\n        res.setHeader(\"X-Package\", \"github.com/gokit/rpkit/examples/users\");\n        res.setHeader(\"X-Method\", \"PokeAgain\");\n        res.setHeader(\"X-Method-Service\", MethodServiceName);\n        res.setHeader(\"X-API-Route\", PokeAgainServiceRoute);\n        res.setHeader(\"X-Package-Interface\", \"users.UserService\");\n\n        for (let key in options.Headers) {\n            res.setHeader(key, options.Headers[key]);\n        }\n\n        if (req.method === \"HEAD\") {\n            res.writeHead(httpStatus[\"no content\"], {});\n            return;\n        }\n\n        const reqURL = URL(req.url);\n        if (!(suffixSlash(reqURL.pathname).endsWith(suffixSlash(PokeAgainServiceRoutePath)))) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"bad request\"],\n                \"method can not be served\",\n                \"not servicing method, only POST or HEAD\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"PokeAgain\",\n                    api_service: MethodServiceName,\n                    route: PokeAgainServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        const actionResult = PokeAgainContract(req);\n        if (!(actionResult instanceof Promise)) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActionError,\n                httpStatus[\"bad request\"],\n                \"method failed to return promise\",\n                new Error(\"Promise expected as return from method\"), {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"PokeAgain\",\n                    api_service: MethodServiceName,\n                    route: PokeAgainServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        actionResult.then((model) => {\n            res.writeHead(httpStatus[\"no content\"], {});\n            res.end();\n            return model;\n        }).catch((err) => {\n            if (res.finished) {\n                return Promise.reject(err);\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActionError,\n                httpStatus[\"bad request\"],\n                \"method returned with an error\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"PokeAgain\",\n                    api_service: MethodServiceName,\n                    route: PokeAgainServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        if (next && typeof next == \"function\") next();\n    };\n}\n\n\n\n// /////////////////////////////////////////////////////////////////\n// RP: Output with Returning Error methods\n// Method: Get\n// Source: github.com/gokit/rpkit/examples/users\n// Handler: users.UserService.Get\n// /////////////////////////////////////////////////////////////////\n\n// GetServiceRoute defines the route for the Get method.\nexport const GetServiceRoute = \"users.UserService/Get\";\n\n// GetServiceRoutePath defines the full method path for the Get method.\nexport const GetServiceRoutePath = \"/rpkit/users.UserService/Get\";\n\n// GetContractSource contains the source version of expected method contract.\nexport const GetContractSource = `type GetMethodContract interface {\n\tGet(var1 context.Context)  (int,error)  \n}`;\n\n\n\n// GetService returns a middleware-aware function which services\n// server-based requests for the GetByContract method. The GetByContract\n// must return a promise, which must be used for receiving a response.\nexport function GetService(GetContract, options) {\n    if (options.BeforeRequest && typeof options.BeforeRequest !== \"function\") {\n        throw new Error(\"options.BeforeRequest must be a function\");\n    }\n\n    if (options.Headers && typeof options.Headers !== \"object\") {\n        throw new Error(\"options.Headers must be a object map\");\n    }\n\n    // encoders must be functions that returns promises from their Encode methods.\n    if (options.Encoder && typeof options.Encoder.Encode !== \"function\") {\n        throw new Error(\"Encoder must provide Encoder function\");\n    }\n\n    // decoders must be functions that returns promises from their Encode methods.\n    if (options.Decoder && typeof options.Decoder.Decode !== \"function\") {\n        throw new Error(\"Decoder must provide Decode function\");\n    }\n\n    if (!options.Headers) options.Headers = {}\n    if (!options.Encoder) options.Encoder = JSONEncoding;\n    if (!options.Decoder) options.Decoder = JSONEncoding;\n\n    return function GetServiceMiddleware(req, res, next) {\n        if ([\"HEAD\", \"POST\"].indexOf(req.method) === -1) {\n            res.writeHead(httpStatus[\"not allowed\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"not allowed\"],\n                \"method not served\",\n                \"not servicing method, only posts or head\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Get\",\n                    api_service: MethodServiceName,\n                    route: GetServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        if(options.BeforeRequest) options.BeforeRequest(req);\n\n        res.setHeader(\"X-Agent\", \"RPKIT\");\n        res.setHeader(\"X-Service\", BaseServiceName);\n        res.setHeader(\"X-Package\", \"github.com/gokit/rpkit/examples/users\");\n        res.setHeader(\"X-Method\", \"Get\");\n        res.setHeader(\"X-Method-Service\", MethodServiceName);\n        res.setHeader(\"X-API-Route\", GetServiceRoute);\n        res.setHeader(\"X-Package-Interface\", \"users.UserService\");\n\n        for (let key in options.Headers) {\n            res.setHeader(key, options.Headers[key]);\n        }\n\n        if (req.method === \"HEAD\") {\n            res.writeHead(httpStatus[\"no content\"], {});\n            return;\n        }\n\n        const reqURL = URL(req.url);\n        if (!(suffixSlash(reqURL.pathname).endsWith(suffixSlash(GetServiceRoutePath)))) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"bad request\"],\n                \"method can not be served\",\n                \"not servicing method, only POST or HEAD\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Get\",\n                    api_service: MethodServiceName,\n                    route: GetServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        const actionResult = GetContract(req);\n        if (!(actionResult instanceof Promise)) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActionError,\n                httpStatus[\"bad request\"],\n                \"method failed to return promise\",\n                new Error(\"Promise expected as return from method\"), {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Get\",\n                    api_service: MethodServiceName,\n                    route: GetServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        actionResult.catch((err) => {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActionError,\n                httpStatus[\"bad request\"],\n                \"method returned with an error\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Get\",\n                    api_service: MethodServiceName,\n                    route: GetServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        actionResult.then((model) => {\n            return options.Encoder.Encode(req, res, model);\n        }).then((m) => {\n            res.end();\n            return m;\n        }).catch((err) => {\n            if (res.finished) {\n                return Promise.reject(err);\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ResponseEncodingError,\n                httpStatus[\"bad request\"],\n                \"failed to encode response\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Get\",\n                    api_service: MethodServiceName,\n                    route: GetServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        if (next && typeof next == \"function\") next();\n    };\n}\n\n\n\n// /////////////////////////////////////////////////////////////////\n// RP: Output Returning No Error methods\n// Method: GetUsers\n// Source: github.com/gokit/rpkit/examples/users\n// Handler: users.UserService.GetUsers\n// /////////////////////////////////////////////////////////////////\n\n// GetUsersServiceRoute defines the route for the GetUsers method.\nexport const GetUsersServiceRoute = \"users.UserService/GetUsers\";\n\n// GetUsersServiceRoutePath defines the full method path for the GetUsers method.\nexport const GetUsersServiceRoutePath = \"/rpkit/users.UserService/GetUsers\";\n\n// GetUsersContractSource contains the source version of expected method contract.\nexport const GetUsersContractSource = `type GetUsersMethodContract interface {\n\tGetUsers(var1 context.Context)  []users.User  \n}`;\n\n\n// GetUsersMethodUserSliceFactory defines a function to\n// return a default object containing default field values of return value of\n// GetUsers method.\nexport function GetUsersMethodUserSliceFactory(){\n    return JSON.parse(\"{\\n\\n\\n    \\\"id\\\":\\t0,\\n\\n    \\\"name\\\":\\t\\\"\\\",\\n\\n    \\\"addr\\\":\\t\\\"\\\",\\n\\n    \\\"cid\\\":\\t0.0\\n\\n}\");\n}\n\n\n// GetUsersService returns a middleware-aware function which services\n// server-based requests for the GetByContract method. The GetByContract\n// must return a promise, which must be used for receiving a response.\nexport function GetUsersService(GetUsersContract, options) {\n    if (options.BeforeRequest && typeof options.BeforeRequest !== \"function\") {\n        throw new Error(\"options.BeforeRequest must be a function\");\n    }\n\n    if (options.Headers && typeof options.Headers !== \"object\") {\n        throw new Error(\"options.Headers must be a object map\");\n    }\n\n    // encoders must be functions that returns promises from their Encode methods.\n    if (options.Encoder && typeof options.Encoder.Encode !== \"function\") {\n        throw new Error(\"Encoder must provide Encoder function\");\n    }\n\n    // decoders must be functions that returns promises from their Encode methods.\n    if (options.Decoder && typeof options.Decoder.Decode !== \"function\") {\n        throw new Error(\"Decoder must provide Decode function\");\n    }\n\n    if (!options.Headers) options.Headers = {}\n    if (!options.Encoder) options.Encoder = JSONEncoding;\n    if (!options.Decoder) options.Decoder = JSONEncoding;\n\n    return function GetUsersServiceMiddleware(req, res, next) {\n        if ([\"HEAD\", \"POST\"].indexOf(req.method) === -1) {\n            res.writeHead(httpStatus[\"not allowed\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"not allowed\"],\n                \"method not served\",\n                \"not servicing method, only posts or head\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUsers\",\n                    api_service: MethodServiceName,\n                    route: GetUsersServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n        \n        if(options.BeforeRequest) options.BeforeRequest(req);\n\n        res.setHeader(\"X-Agent\", \"RPKIT\");\n        res.setHeader(\"X-Service\", BaseServiceName);\n        res.setHeader(\"X-Package\", \"github.com/gokit/rpkit/examples/users\");\n        res.setHeader(\"X-Method\", \"GetUsers\");\n        res.setHeader(\"X-Method-Service\", MethodServiceName);\n        res.setHeader(\"X-API-Route\", GetUsersServiceRoute);\n        res.setHeader(\"X-Package-Interface\", \"users.UserService\");\n\n        for (let key in options.Headers) {\n            res.setHeader(key, options.Headers[key]);\n        }\n\n        if (req.method === \"HEAD\") {\n            res.writeHead(httpStatus[\"no content\"], {});\n            return;\n        }\n\n        const reqURL = URL(req.url);\n        if (!(suffixSlash(reqURL.pathname).endsWith(suffixSlash(GetUsersServiceRoutePath)))) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"bad request\"],\n                \"method can not be served\",\n                \"not servicing method, only POST or HEAD\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUsers\",\n                    api_service: MethodServiceName,\n                    route: GetUsersServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        const actionResult = GetUsersContract(req);\n        if (!(actionResult instanceof Promise)) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActionError,\n                httpStatus[\"bad request\"],\n                \"method failed to return promise\",\n                new Error(\"Promise expected as return from method\"), {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUsers\",\n                    api_service: MethodServiceName,\n                    route: GetUsersServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        actionResult.catch((err) => {\n            if (res.finished) {\n                return;\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActionError,\n                httpStatus[\"bad request\"],\n                \"method returned with an error\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUsers\",\n                    api_service: MethodServiceName,\n                    route: GetUsersServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        actionResult.then((model) => {\n            return options.Encoder.Encode(req, res, model);\n        }).then((m) => {\n            res.end();\n            return m;\n        }).catch((err) => {\n            if (res.finished) {\n                return Promise.reject(err);\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ResponseEncodingError,\n                httpStatus[\"bad request\"],\n                \"failed to encode response\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUsers\",\n                    api_service: MethodServiceName,\n                    route: GetUsersServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        if (next && typeof next == \"function\") next();\n    };\n}\n\n\n\n\n\n// /////////////////////////////////////////////////////////////////\n// RP: Input And Output Returning Error methods\n// Method: Create\n// Source: github.com/gokit/rpkit/examples/users\n// Handler: users.UserService.Create\n// /////////////////////////////////////////////////////////////////\n\n// CreateServiceRoute defines the route for the Create method.\nexport const CreateServiceRoute = \"users.UserService/Create\";\n\n// CreateServiceRoutePath defines the full method path for the Create method.\nexport const CreateServiceRoutePath = \"/users/UserService/Create\";\n\n// CreateContractSource contains the source version of expected method contract.\nexport const CreateContractSource = `type CreateMethodContract interface {\n\tCreate(var1 context.Context,var2 users.NewUser)  (users.User,error)  \n}`;\n\n\n// CreateMethodUserFactory defines a function to\n// return a default object containing default field values of return value of\n// Create method.\nexport function CreateMethodUserFactory(){\n    return JSON.parse(\"{\\n\\n\\n    \\\"id\\\":\\t0,\\n\\n    \\\"name\\\":\\t\\\"\\\",\\n\\n    \\\"addr\\\":\\t\\\"\\\",\\n\\n    \\\"cid\\\":\\t0.0\\n\\n}\");\n}\n\n\n\n// CreateMethodNewUserFactory defines a function to\n// return a default object containing default field values of argument of\n// Create method.\nexport function CreateMethodNewUserFactory(){\n    return JSON.parse(\"{\\n\\n\\n    \\\"name\\\":\\t\\\"\\\"\\n\\n}\");\n}\n\n\n// CreateService returns a middleware-aware function which services\n// server-based requests for the GetByContract method. The GetByContract\n// must return a promise, which must be used for receiving a response.\nexport function CreateService(CreateContract, options) {\n    if (options.BeforeRequest && typeof options.BeforeRequest !== \"function\") {\n        throw new Error(\"options.BeforeRequest must be a function\");\n    }\n\n    if (options.Headers && typeof options.Headers !== \"object\") {\n        throw new Error(\"options.Headers must be a object map\");\n    }\n\n    // encoders must be functions that returns promises from their Encode methods.\n    if (options.Encoder && typeof options.Encoder.Encode !== \"function\") {\n        throw new Error(\"Encoder must provide Encoder function\");\n    }\n\n    // decoders must be functions that returns promises from their Encode methods.\n    if (options.Decoder && typeof options.Decoder.Decode !== \"function\") {\n        throw new Error(\"Decoder must provide Decode function\");\n    }\n\n    if (!options.Headers) options.Headers = {}\n    if (!options.Encoder) options.Encoder = JSONEncoding;\n    if (!options.Decoder) options.Decoder = JSONEncoding;\n\n    return function CreateServiceMiddleware(req, res, next) {\n        if ([\"HEAD\", \"POST\"].indexOf(req.method) === -1) {\n            res.writeHead(httpStatus[\"not allowed\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"not allowed\"],\n                \"method not served\",\n                \"not servicing method, only posts or head\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Create\",\n                    api_service: MethodServiceName,\n                    route: CreateServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        if(options.BeforeRequest) options.BeforeRequest(req);\n        \n        res.setHeader(\"X-Agent\", \"RPKIT\");\n        res.setHeader(\"X-Service\", BaseServiceName);\n        res.setHeader(\"X-Package\", \"github.com/gokit/rpkit/examples/users\");\n        res.setHeader(\"X-Method\", \"Create\");\n        res.setHeader(\"X-Method-Service\", MethodServiceName);\n        res.setHeader(\"X-API-Route\", CreateServiceRoute);\n        res.setHeader(\"X-Package-Interface\", \"users.UserService\");\n\n        for (let key in options.Headers) {\n            res.setHeader(key, options.Headers[key]);\n        }\n\n        if (req.method === \"HEAD\") {\n            res.writeHead(httpStatus[\"no content\"], {});\n            return;\n        }\n\n        const reqURL = URL(req.url);\n        if (!(suffixSlash(reqURL.pathname).endsWith(suffixSlash(CreateServiceRoutePath)))) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"bad request\"],\n                \"method can not be served\",\n                \"not servicing method, only POST or HEAD\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Create\",\n                    api_service: MethodServiceName,\n                    route: CreateServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        const decodePromise = options.Decoder.Decode(req);\n        if (!(decodePromise instanceof Promise)) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                httpStatus[\"bad request\"],\n                \"decoder.Decode method failed to return promise\",\n                new Error(\"Promise expected as return from method\"), {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Create\",\n                    api_service: MethodServiceName,\n                    route: CreateServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        decodePromise.catch((err) => {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                httpStatus[\"bad request\"],\n                \"failed to decode request body\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Create\",\n                    api_service: MethodServiceName,\n                    route: CreateServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        const actionRes = decodePromise.then((result) => {\n            const actionResult = CreateContract(req, result);\n            if (!(actionResult instanceof Promise)) {\n                return Promise.reject(new Error(\"failed action: action does not return a Promise\"));\n            }\n\n            return actionResult;\n        });\n\n        actionRes.catch((err) => {\n            if (res.finished) {\n                return Promise.reject(err);\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActionError,\n                httpStatus[\"bad request\"],\n                \"method returned with an error\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Create\",\n                    api_service: MethodServiceName,\n                    route: CreateServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        actionRes.then((model) => {\n            return options.Encoder.Encode(req, res, model);\n        }).then((m) => {\n            res.end();\n            return m;\n        }).catch((err) => {\n            if(res.finished){\n                return Promise.reject(err);\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ResponseEncodingError,\n                httpStatus[\"bad request\"],\n                \"failed to encode response\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"Create\",\n                    api_service: MethodServiceName,\n                    route: CreateServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        if (next && typeof next == \"function\") next();\n    };\n}\n\n\n// /////////////////////////////////////////////////////////////////\n// RP: Input And Output Returning Error methods\n// Method: GetBy\n// Source: github.com/gokit/rpkit/examples/users\n// Handler: users.UserService.GetBy\n// /////////////////////////////////////////////////////////////////\n\n// GetByServiceRoute defines the route for the GetBy method.\nexport const GetByServiceRoute = \"users.UserService/GetBy\";\n\n// GetByServiceRoutePath defines the full method path for the GetBy method.\nexport const GetByServiceRoutePath = \"/users/UserService/GetBy\";\n\n// GetByContractSource contains the source version of expected method contract.\nexport const GetByContractSource = `type GetByMethodContract interface {\n\tGetBy(var1 context.Context,var2 string)  (int,error)  \n}`;\n\n\n\n\n\n// GetByService returns a middleware-aware function which services\n// server-based requests for the GetByContract method. The GetByContract\n// must return a promise, which must be used for receiving a response.\nexport function GetByService(GetByContract, options) {\n    if (options.BeforeRequest && typeof options.BeforeRequest !== \"function\") {\n        throw new Error(\"options.BeforeRequest must be a function\");\n    }\n\n    if (options.Headers && typeof options.Headers !== \"object\") {\n        throw new Error(\"options.Headers must be a object map\");\n    }\n\n    // encoders must be functions that returns promises from their Encode methods.\n    if (options.Encoder && typeof options.Encoder.Encode !== \"function\") {\n        throw new Error(\"Encoder must provide Encoder function\");\n    }\n\n    // decoders must be functions that returns promises from their Encode methods.\n    if (options.Decoder && typeof options.Decoder.Decode !== \"function\") {\n        throw new Error(\"Decoder must provide Decode function\");\n    }\n\n    if (!options.Headers) options.Headers = {}\n    if (!options.Encoder) options.Encoder = JSONEncoding;\n    if (!options.Decoder) options.Decoder = JSONEncoding;\n\n    return function GetByServiceMiddleware(req, res, next) {\n        if ([\"HEAD\", \"POST\"].indexOf(req.method) === -1) {\n            res.writeHead(httpStatus[\"not allowed\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"not allowed\"],\n                \"method not served\",\n                \"not servicing method, only posts or head\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetBy\",\n                    api_service: MethodServiceName,\n                    route: GetByServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        if(options.BeforeRequest) options.BeforeRequest(req);\n        \n        res.setHeader(\"X-Agent\", \"RPKIT\");\n        res.setHeader(\"X-Service\", BaseServiceName);\n        res.setHeader(\"X-Package\", \"github.com/gokit/rpkit/examples/users\");\n        res.setHeader(\"X-Method\", \"GetBy\");\n        res.setHeader(\"X-Method-Service\", MethodServiceName);\n        res.setHeader(\"X-API-Route\", GetByServiceRoute);\n        res.setHeader(\"X-Package-Interface\", \"users.UserService\");\n\n        for (let key in options.Headers) {\n            res.setHeader(key, options.Headers[key]);\n        }\n\n        if (req.method === \"HEAD\") {\n            res.writeHead(httpStatus[\"no content\"], {});\n            return;\n        }\n\n        const reqURL = URL(req.url);\n        if (!(suffixSlash(reqURL.pathname).endsWith(suffixSlash(GetByServiceRoutePath)))) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"bad request\"],\n                \"method can not be served\",\n                \"not servicing method, only POST or HEAD\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetBy\",\n                    api_service: MethodServiceName,\n                    route: GetByServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        const decodePromise = options.Decoder.Decode(req);\n        if (!(decodePromise instanceof Promise)) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                httpStatus[\"bad request\"],\n                \"decoder.Decode method failed to return promise\",\n                new Error(\"Promise expected as return from method\"), {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetBy\",\n                    api_service: MethodServiceName,\n                    route: GetByServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        decodePromise.catch((err) => {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                httpStatus[\"bad request\"],\n                \"failed to decode request body\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetBy\",\n                    api_service: MethodServiceName,\n                    route: GetByServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        const actionRes = decodePromise.then((result) => {\n            const actionResult = GetByContract(req, result);\n            if (!(actionResult instanceof Promise)) {\n                return Promise.reject(new Error(\"failed action: action does not return a Promise\"));\n            }\n\n            return actionResult;\n        });\n\n        actionRes.catch((err) => {\n            if (res.finished) {\n                return Promise.reject(err);\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActionError,\n                httpStatus[\"bad request\"],\n                \"method returned with an error\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetBy\",\n                    api_service: MethodServiceName,\n                    route: GetByServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        actionRes.then((model) => {\n            return options.Encoder.Encode(req, res, model);\n        }).then((m) => {\n            res.end();\n            return m;\n        }).catch((err) => {\n            if(res.finished){\n                return Promise.reject(err);\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ResponseEncodingError,\n                httpStatus[\"bad request\"],\n                \"failed to encode response\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetBy\",\n                    api_service: MethodServiceName,\n                    route: GetByServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        if (next && typeof next == \"function\") next();\n    };\n}\n\n\n// /////////////////////////////////////////////////////////////////\n// RP: Input And Output Returning Error methods\n// Method: CreateUser\n// Source: github.com/gokit/rpkit/examples/users\n// Handler: users.UserService.CreateUser\n// /////////////////////////////////////////////////////////////////\n\n// CreateUserServiceRoute defines the route for the CreateUser method.\nexport const CreateUserServiceRoute = \"users.UserService/CreateUser\";\n\n// CreateUserServiceRoutePath defines the full method path for the CreateUser method.\nexport const CreateUserServiceRoutePath = \"/users/UserService/CreateUser\";\n\n// CreateUserContractSource contains the source version of expected method contract.\nexport const CreateUserContractSource = `type CreateUserMethodContract interface {\n\tCreateUser(var1 users.NewUser)  (users.User,error)  \n}`;\n\n\n// CreateUserMethodUserFactory defines a function to\n// return a default object containing default field values of return value of\n// CreateUser method.\nexport function CreateUserMethodUserFactory(){\n    return JSON.parse(\"{\\n\\n\\n    \\\"id\\\":\\t0,\\n\\n    \\\"name\\\":\\t\\\"\\\",\\n\\n    \\\"addr\\\":\\t\\\"\\\",\\n\\n    \\\"cid\\\":\\t0.0\\n\\n}\");\n}\n\n\n// CreateUserMethodNewUserFactory defines a function to\n// return a default object containing default field values of argument of\n// CreateUser method.\nexport function CreateUserMethodNewUserFactory(){\n    return JSON.parse(\"{\\n\\n\\n    \\\"name\\\":\\t\\\"\\\"\\n\\n}\");\n}\n\n\n\n// CreateUserService returns a middleware-aware function which services\n// server-based requests for the GetByContract method. The GetByContract\n// must return a promise, which must be used for receiving a response.\nexport function CreateUserService(CreateUserContract, options) {\n    if (options.BeforeRequest && typeof options.BeforeRequest !== \"function\") {\n        throw new Error(\"options.BeforeRequest must be a function\");\n    }\n\n    if (options.Headers && typeof options.Headers !== \"object\") {\n        throw new Error(\"options.Headers must be a object map\");\n    }\n\n    // encoders must be functions that returns promises from their Encode methods.\n    if (options.Encoder && typeof options.Encoder.Encode !== \"function\") {\n        throw new Error(\"Encoder must provide Encoder function\");\n    }\n\n    // decoders must be functions that returns promises from their Encode methods.\n    if (options.Decoder && typeof options.Decoder.Decode !== \"function\") {\n        throw new Error(\"Decoder must provide Decode function\");\n    }\n\n    if (!options.Headers) options.Headers = {}\n    if (!options.Encoder) options.Encoder = JSONEncoding;\n    if (!options.Decoder) options.Decoder = JSONEncoding;\n\n    return function CreateUserServiceMiddleware(req, res, next) {\n        if ([\"HEAD\", \"POST\"].indexOf(req.method) === -1) {\n            res.writeHead(httpStatus[\"not allowed\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"not allowed\"],\n                \"method not served\",\n                \"not servicing method, only posts or head\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"CreateUser\",\n                    api_service: MethodServiceName,\n                    route: CreateUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        if(options.BeforeRequest) options.BeforeRequest(req);\n        \n        res.setHeader(\"X-Agent\", \"RPKIT\");\n        res.setHeader(\"X-Service\", BaseServiceName);\n        res.setHeader(\"X-Package\", \"github.com/gokit/rpkit/examples/users\");\n        res.setHeader(\"X-Method\", \"CreateUser\");\n        res.setHeader(\"X-Method-Service\", MethodServiceName);\n        res.setHeader(\"X-API-Route\", CreateUserServiceRoute);\n        res.setHeader(\"X-Package-Interface\", \"users.UserService\");\n\n        for (let key in options.Headers) {\n            res.setHeader(key, options.Headers[key]);\n        }\n\n        if (req.method === \"HEAD\") {\n            res.writeHead(httpStatus[\"no content\"], {});\n            return;\n        }\n\n        const reqURL = URL(req.url);\n        if (!(suffixSlash(reqURL.pathname).endsWith(suffixSlash(CreateUserServiceRoutePath)))) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"bad request\"],\n                \"method can not be served\",\n                \"not servicing method, only POST or HEAD\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"CreateUser\",\n                    api_service: MethodServiceName,\n                    route: CreateUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        const decodePromise = options.Decoder.Decode(req);\n        if (!(decodePromise instanceof Promise)) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                httpStatus[\"bad request\"],\n                \"decoder.Decode method failed to return promise\",\n                new Error(\"Promise expected as return from method\"), {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"CreateUser\",\n                    api_service: MethodServiceName,\n                    route: CreateUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        decodePromise.catch((err) => {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                httpStatus[\"bad request\"],\n                \"failed to decode request body\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"CreateUser\",\n                    api_service: MethodServiceName,\n                    route: CreateUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        const actionRes = decodePromise.then((result) => {\n            const actionResult = CreateUserContract(req, result);\n            if (!(actionResult instanceof Promise)) {\n                return Promise.reject(new Error(\"failed action: action does not return a Promise\"));\n            }\n\n            return actionResult;\n        });\n\n        actionRes.catch((err) => {\n            if (res.finished) {\n                return Promise.reject(err);\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActionError,\n                httpStatus[\"bad request\"],\n                \"method returned with an error\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"CreateUser\",\n                    api_service: MethodServiceName,\n                    route: CreateUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        actionRes.then((model) => {\n            return options.Encoder.Encode(req, res, model);\n        }).then((m) => {\n            res.end();\n            return m;\n        }).catch((err) => {\n            if(res.finished){\n                return Promise.reject(err);\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ResponseEncodingError,\n                httpStatus[\"bad request\"],\n                \"failed to encode response\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"CreateUser\",\n                    api_service: MethodServiceName,\n                    route: CreateUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        if (next && typeof next == \"function\") next();\n    };\n}\n\n\n// /////////////////////////////////////////////////////////////////\n// RP: Input And Output Returning Error methods\n// Method: GetUser\n// Source: github.com/gokit/rpkit/examples/users\n// Handler: users.UserService.GetUser\n// /////////////////////////////////////////////////////////////////\n\n// GetUserServiceRoute defines the route for the GetUser method.\nexport const GetUserServiceRoute = \"users.UserService/GetUser\";\n\n// GetUserServiceRoutePath defines the full method path for the GetUser method.\nexport const GetUserServiceRoutePath = \"/users/UserService/GetUser\";\n\n// GetUserContractSource contains the source version of expected method contract.\nexport const GetUserContractSource = `type GetUserMethodContract interface {\n\tGetUser(var1 int)  (users.User,error)  \n}`;\n\n\n// GetUserMethodUserFactory defines a function to\n// return a default object containing default field values of return value of\n// GetUser method.\nexport function GetUserMethodUserFactory(){\n    return JSON.parse(\"{\\n\\n\\n    \\\"id\\\":\\t0,\\n\\n    \\\"name\\\":\\t\\\"\\\",\\n\\n    \\\"addr\\\":\\t\\\"\\\",\\n\\n    \\\"cid\\\":\\t0.0\\n\\n}\");\n}\n\n\n\n\n// GetUserService returns a middleware-aware function which services\n// server-based requests for the GetByContract method. The GetByContract\n// must return a promise, which must be used for receiving a response.\nexport function GetUserService(GetUserContract, options) {\n    if (options.BeforeRequest && typeof options.BeforeRequest !== \"function\") {\n        throw new Error(\"options.BeforeRequest must be a function\");\n    }\n\n    if (options.Headers && typeof options.Headers !== \"object\") {\n        throw new Error(\"options.Headers must be a object map\");\n    }\n\n    // encoders must be functions that returns promises from their Encode methods.\n    if (options.Encoder && typeof options.Encoder.Encode !== \"function\") {\n        throw new Error(\"Encoder must provide Encoder function\");\n    }\n\n    // decoders must be functions that returns promises from their Encode methods.\n    if (options.Decoder && typeof options.Decoder.Decode !== \"function\") {\n        throw new Error(\"Decoder must provide Decode function\");\n    }\n\n    if (!options.Headers) options.Headers = {}\n    if (!options.Encoder) options.Encoder = JSONEncoding;\n    if (!options.Decoder) options.Decoder = JSONEncoding;\n\n    return function GetUserServiceMiddleware(req, res, next) {\n        if ([\"HEAD\", \"POST\"].indexOf(req.method) === -1) {\n            res.writeHead(httpStatus[\"not allowed\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"not allowed\"],\n                \"method not served\",\n                \"not servicing method, only posts or head\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUser\",\n                    api_service: MethodServiceName,\n                    route: GetUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        if(options.BeforeRequest) options.BeforeRequest(req);\n        \n        res.setHeader(\"X-Agent\", \"RPKIT\");\n        res.setHeader(\"X-Service\", BaseServiceName);\n        res.setHeader(\"X-Package\", \"github.com/gokit/rpkit/examples/users\");\n        res.setHeader(\"X-Method\", \"GetUser\");\n        res.setHeader(\"X-Method-Service\", MethodServiceName);\n        res.setHeader(\"X-API-Route\", GetUserServiceRoute);\n        res.setHeader(\"X-Package-Interface\", \"users.UserService\");\n\n        for (let key in options.Headers) {\n            res.setHeader(key, options.Headers[key]);\n        }\n\n        if (req.method === \"HEAD\") {\n            res.writeHead(httpStatus[\"no content\"], {});\n            return;\n        }\n\n        const reqURL = URL(req.url);\n        if (!(suffixSlash(reqURL.pathname).endsWith(suffixSlash(GetUserServiceRoutePath)))) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(MethodTypeError,\n                httpStatus[\"bad request\"],\n                \"method can not be served\",\n                \"not servicing method, only POST or HEAD\", {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUser\",\n                    api_service: MethodServiceName,\n                    route: GetUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        const decodePromise = options.Decoder.Decode(req);\n        if (!(decodePromise instanceof Promise)) {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                httpStatus[\"bad request\"],\n                \"decoder.Decode method failed to return promise\",\n                new Error(\"Promise expected as return from method\"), {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUser\",\n                    api_service: MethodServiceName,\n                    route: GetUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n            return;\n        }\n\n        decodePromise.catch((err) => {\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(RequestDecodingError,\n                httpStatus[\"bad request\"],\n                \"failed to decode request body\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUser\",\n                    api_service: MethodServiceName,\n                    route: GetUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        const actionRes = decodePromise.then((result) => {\n            const actionResult = GetUserContract(req, result);\n            if (!(actionResult instanceof Promise)) {\n                return Promise.reject(new Error(\"failed action: action does not return a Promise\"));\n            }\n\n            return actionResult;\n        });\n\n        actionRes.catch((err) => {\n            if (res.finished) {\n                return Promise.reject(err);\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ActionError,\n                httpStatus[\"bad request\"],\n                \"method returned with an error\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUser\",\n                    api_service: MethodServiceName,\n                    route: GetUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        actionRes.then((model) => {\n            return options.Encoder.Encode(req, res, model);\n        }).then((m) => {\n            res.end();\n            return m;\n        }).catch((err) => {\n            if(res.finished){\n                return Promise.reject(err);\n            }\n\n            res.writeHead(httpStatus[\"bad request\"], {\n                \"Content-Type\": \"application/json\",\n            });\n\n            res.write(JSON.stringify(JSONErrorResponse(ResponseEncodingError,\n                httpStatus[\"bad request\"],\n                \"failed to encode response\",\n                err, {\n                    url: req.url,\n                    headers: req.headers,\n                    http_method: req.method,\n                    package: \"github.com/gokit/rpkit/examples/users\",\n                    api_base: BaseServiceName,\n                    method: \"GetUser\",\n                    api_service: MethodServiceName,\n                    route: GetUserServiceRoute,\n                    api: \"users.UserService\",\n                })));\n\n            res.end();\n        });\n\n        if (next && typeof next == \"function\") next();\n    };\n}\n\n\n\n","module.exports = __WEBPACK_EXTERNAL_MODULE_lodash__;","module.exports = __WEBPACK_EXTERNAL_MODULE_statuses__;","module.exports = __WEBPACK_EXTERNAL_MODULE_url_parse__;"],"sourceRoot":""}